{"version":3,"sources":["../node_modules/redux-form/es/Form.js","components/Profile/Profileinfo/Profileinfo.module.css","components/Profile/Profileinfo/ProfileStatus.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profileinfo/ProfileStatus.tsx","components/Profile/Profileinfo/ProfileDataForm.tsx","components/Profile/Profileinfo/Profileinfo.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0___default","n","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","react_lifecycles_compat__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_4__","prop_types__WEBPACK_IMPORTED_MODULE_4___default","_ReduxFormContext__WEBPACK_IMPORTED_MODULE_5__","Form","_Component","props","_this","call","this","_reduxForm","Error","_proto","prototype","UNSAFE_componentWillMount","registerInnerOnSubmit","onSubmit","render","_this$props","rest","a","createElement","propTypes","func","isRequired","object","Object","__webpack_exports__","module","exports","desc","profileImg","singleForm","inputPhotos","contacts","contact","noStatusBar","postsBlock","input","item","ProfileStatus","_useState","useState","_useState2","slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","react_default","className","s","statusLine","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","_ref","handleSubmit","profile","error","sform","formSummaryError","createField","Input","type","Textarea","keys","map","key","ProfileData","_ref2","isOwner","activateEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Profileinfo_Contact","contactTitle","contactValue","Contact","_ref3","Profileinfo","savePhoto","saveProfile","Preloader","ProfileInfo","src","photos","large","userPhoto","alt","name","target","files","length","Profileinfo_ProfileDataForm","initialValues","formData","then","Profileinfo_ProfileData","Profileinfo_ProfileStatus","action","required","Post","message","likesCount","MyPostsMemoized","React","memo","postsElements","toConsumableArray","posts","reverse","p","MyPosts_Post_Post","id","MyPosts_AddPostForm_AddPostForm","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","actions","MyPosts","Profile","Profile_Profileinfo_Profileinfo","MyPosts_MyPostsContainer","ProfileContainer","userId","match","params","loggedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","components_Profile_Profile","assign","Component","compose","auth","isAuth","withRouter"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,IAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,IAAAI,EAAAJ,EAAAE,EAAAC,GAAAE,EAAAL,EAAA,GAAAM,EAAAN,EAAAE,EAAAG,GAAAE,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,GAAAS,EAAAT,EAAAE,EAAAM,GAAAE,EAAAV,EAAA,IAOAW,EAEA,SAAAC,GAGA,SAAAD,EAAAE,GACA,IAAAC,EAIA,GAFAA,EAAAF,EAAAG,KAAAC,KAAAH,IAAAG,MAEAH,EAAAI,WACA,UAAAC,MAAA,8DAGA,OAAAJ,EAXEV,IAAcO,EAAAC,GAchB,IAAAO,EAAAR,EAAAS,UAcA,OAZAD,EAAAE,0BAAA,WACAL,KAAAH,MAAAI,WAAAK,sBAAAN,KAAAH,MAAAU,WAGAJ,EAAAK,OAAA,WACA,IAAAC,EAAAT,KAAAH,MAEAa,GADAD,EAAAR,WACehB,IAA6BwB,EAAA,iBAE5C,OAAWnB,EAAAqB,EAAKC,cAAA,OAAAF,IAGhBf,EA7BA,CA8BEN,EAAA,WAEFM,EAAAkB,UAAA,CACAN,SAAYd,EAAAkB,EAASG,KAAAC,WACrBd,WAAcR,EAAAkB,EAASK,QAEvBC,OAAA1B,EAAA,EAAA0B,CAAQtB,GACOuB,EAAA,EAAAD,OAAAvB,EAAA,GAAaC,wBC7C5BwB,EAAAC,QAAA,CAAkBC,KAAA,0BAAAC,WAAA,gCAAAC,WAAA,gCAAAC,YAAA,iCAAAC,SAAA,8BAAAC,QAAA,mDCAlBP,EAAAC,QAAA,CAAkBO,YAAA,yDCAlBR,EAAAC,QAAA,CAAkBQ,WAAA,4BAAAC,MAAA,6CCAlBV,EAAAC,QAAA,CAAkBU,KAAA,8KCoDHC,EA7CO,SAAClC,GAAqB,IAAAmC,EACVC,oBAAS,GADCC,EAAAjB,OAAAkB,EAAA,EAAAlB,CAAAe,EAAA,GACnCI,EADmCF,EAAA,GACzBG,EADyBH,EAAA,GAAAI,EAEdL,mBAASpC,EAAM0C,QAFDC,EAAAvB,OAAAkB,EAAA,EAAAlB,CAAAqB,EAAA,GAEnCC,EAFmCC,EAAA,GAE3BC,EAF2BD,EAAA,GAqBxC,OAJAE,oBAAU,WACND,EAAU5C,EAAM0C,SACjB,IAGCI,EAAAhC,EAAAC,cAAA,YACMwB,GACEO,EAAAhC,EAAAC,cAAA,WACI+B,EAAAhC,EAAAC,cAAA,KAAGgC,UAAWC,IAAEC,YAAhB,YACAH,EAAAhC,EAAAC,cAAA,QAAMmC,cAtBG,WACrBV,GAAY,KAsBKxC,EAAM0C,QAAU,YAI5BH,GACGO,EAAAhC,EAAAC,cAAA,WACI+B,EAAAhC,EAAAC,cAAA,KAAGgC,UAAWC,IAAEC,YAAhB,YACAH,EAAAhC,EAAAC,cAAA,SACIoC,SAtBG,SAACC,GACpBR,EAAUQ,EAAEC,cAAcC,QAsBVC,OA5BO,WACvBf,GAAY,GACZxC,EAAMwD,aAAad,IA2BHY,MAAOZ,kDCmChBe,EAVkBC,YAAkC,CAC/DC,KAAM,gBADuBD,CAzDhB,SAAAE,GAAsC,IAAnCC,EAAmCD,EAAnCC,aAAcC,EAAqBF,EAArBE,QAASC,EAAYH,EAAZG,MACvC,OACIjB,EAAAhC,EAAAC,cAACjB,EAAA,EAAD,CAAMY,SAAUmD,GACZf,EAAAhC,EAAAC,cAAA,sBACCgD,GAASjB,EAAAhC,EAAAC,cAAA,OAAKgC,UAAWiB,IAAMC,kBAAmBF,GACnDjB,EAAAhC,EAAAC,cAAA,OAAKgC,UAAWC,IAAEtB,YACdoB,EAAAhC,EAAAC,cAAA,sBAAiB,IAChBmD,YACG,YACA,WACA,GACAC,MAIRrB,EAAAhC,EAAAC,cAAA,OAAKgC,UAAWC,IAAEtB,YACdoB,EAAAhC,EAAAC,cAAA,+BAA0B,IACzBmD,YAA6B,GAAI,iBAAkB,GAAIC,IAAO,CAC3DC,KAAM,cAGdtB,EAAAhC,EAAAC,cAAA,OAAKgC,UAAWC,IAAEtB,YACdoB,EAAAhC,EAAAC,cAAA,mCAA8B,IAC7BmD,YACG,wBACA,4BACA,GACAG,MAIRvB,EAAAhC,EAAAC,cAAA,OAAKgC,UAAWC,IAAEtB,YACdoB,EAAAhC,EAAAC,cAAA,sBAAiB,IAChBmD,YACG,WACA,UACA,GACAG,MAIRvB,EAAAhC,EAAAC,cAAA,OAAKgC,UAAWC,IAAEpB,UACdkB,EAAAhC,EAAAC,cAAA,sBAAiB,IAChBK,OAAOkD,KAAKR,EAAQlC,UAAU2C,IAAI,SAACC,GAEhC,OACI1B,EAAAhC,EAAAC,cAAA,OAAKyD,IAAKA,EAAKzB,UAAWC,IAAEnB,SACxBiB,EAAAhC,EAAAC,cAAA,SAAIyD,EAAJ,MACCN,YAAYM,EAAK,YAAcA,EAAK,GAAIL,8BC2C/DM,EAA8C,SAAAC,GAI9C,IAHFZ,EAGEY,EAHFZ,QACAa,EAEED,EAFFC,QACAC,EACEF,EADFE,iBAEA,OACI9B,EAAAhC,EAAAC,cAAA,OAAKgC,UAAWC,IAAExB,MACbmD,GAAW7B,EAAAhC,EAAAC,cAAA,UAAQ8D,QAASD,GAAjB,QAEZ9B,EAAAhC,EAAAC,cAAA,WACI+B,EAAAhC,EAAAC,cAAA,sBADJ,IACsB+C,EAAQgB,UAG9BhC,EAAAhC,EAAAC,cAAA,WACI+B,EAAAhC,EAAAC,cAAA,+BAA0B,IACzB+C,EAAQiB,eAAiB,MAAQ,MAEtCjC,EAAAhC,EAAAC,cAAA,WACI+B,EAAAhC,EAAAC,cAAA,mCAA8B,IAC7B+C,EAAQiB,gBACLjC,EAAAhC,EAAAC,cAAA,WAAM+C,EAAQkB,4BAItBlC,EAAAhC,EAAAC,cAAA,WACI+B,EAAAhC,EAAAC,cAAA,sBADJ,IACsB+C,EAAQmB,SAG9BnC,EAAAhC,EAAAC,cAAA,OAAKgC,UAAWC,IAAEpB,UACdkB,EAAAhC,EAAAC,cAAA,sBAAiB,IAChBK,OAAOkD,KAAKR,EAAQlC,UAAU2C,IAAI,SAACC,GAChC,OACI1B,EAAAhC,EAAAC,cAACmE,EAAD,CACIV,IAAKA,EACLW,aAAcX,EACdY,aACItB,EAAQlC,SAAS4C,UAe3Ca,EAAsC,SAAAC,GAGtC,IAFFH,EAEEG,EAFFH,aACAC,EACEE,EADFF,aAEA,OACItC,EAAAhC,EAAAC,cAAA,OAAKgC,UAAWC,IAAEnB,SACbsD,EADL,KACqBC,IAKdG,EArJ0B,SAAA3B,GAOnC,IANFe,EAMEf,EANFe,QACAb,EAKEF,EALFE,QACApB,EAIEkB,EAJFlB,OACAc,EAGEI,EAHFJ,aACAgC,EAEE5B,EAFF4B,UACAC,EACE7B,EADF6B,YACEtD,EAC4BC,oBAAS,GADrCC,EAAAjB,OAAAkB,EAAA,EAAAlB,CAAAe,EAAA,GACGI,EADHF,EAAA,GACaG,EADbH,EAAA,GAGF,IAAKyB,EACD,OAAOhB,EAAAhC,EAAAC,cAAC2E,EAAA,EAAD,MAgBX,OACI5C,EAAAhC,EAAAC,cAAA,OAAKgC,UAAWC,IAAE2C,aACd7C,EAAAhC,EAAAC,cAAA,WACI+B,EAAAhC,EAAAC,cAAA,OACIgC,UAAWC,IAAEvB,WACbmE,IAAK9B,EAAQ+B,OAAOC,OAASC,IAC7BC,IAAI,KAEPrB,GACG7B,EAAAhC,EAAAC,cAAA,WAEI+B,EAAAhC,EAAAC,cAAA,SACIgC,UAAWC,IAAErB,YACbsE,KAAK,YACL7B,KAAM,OACNjB,SA5BE,SAACC,GACnBA,EAAE8C,OAAOC,OAAS/C,EAAE8C,OAAOC,MAAMC,QACjCZ,EAAUpC,EAAE8C,OAAOC,MAAM,QA+BpB5D,EACGO,EAAAhC,EAAAC,cAACsF,EAAD,CACIC,cAAexC,EACfpD,SA9BH,SAAC6F,GAEdd,EAAYc,GAAUC,KAAK,WACvBhE,GAAY,MA4BAsB,QAASA,IAGbhB,EAAAhC,EAAAC,cAAC0F,EAAD,CACI7B,iBAAkB,WACdpC,GAAY,IAEhBsB,QAASA,EACTa,QAASA,IAIjB7B,EAAAhC,EAAAC,cAAC2F,EAAD,CACIhE,OACIA,EASJc,aAAcA,gCCxDnBE,cAAwC,CACnDC,KAAM,oBADKD,CAjBE,SAAC1D,GACd,OACI8C,EAAAhC,EAAAC,cAAA,QAAM4F,OAAO,GAAGjG,SAAUV,EAAM6D,cAC5Bf,EAAAhC,EAAAC,cAAA,WACKmD,YACG,OACA,cACA,CAAC0C,KACDzC,MAGRrB,EAAAhC,EAAAC,cAAA,WACI+B,EAAAhC,EAAAC,cAAA,8DCND8F,EAhBmB,SAAC7G,GAC/B,OACI8C,EAAAhC,EAAAC,cAAA,OAAKgC,UAAWC,IAAEf,MACda,EAAAhC,EAAAC,cAAA,UACK,IACD+B,EAAAhC,EAAAC,cAAA,OACIiF,IAAI,GACJJ,IAAI,iHAEP5F,EAAM8G,SAEXhE,EAAAhC,EAAAC,cAAA,kBAAUf,EAAM+G,cCmBbC,EAFSC,IAAMC,KApB8B,SAAClH,GACzD,IAAImH,EAAgB/F,OAAAgG,EAAA,EAAAhG,CAAIpB,EAAMqH,OACzBC,UACA/C,IAAI,SAACgD,GAAD,OACDzE,EAAAhC,EAAAC,cAACyG,EAAD,CAAMhD,IAAK+C,EAAEE,GAAIX,QAASS,EAAET,QAASC,WAAYQ,EAAER,eAO3D,OACIjE,EAAAhC,EAAAC,cAAA,OAAKgC,UAAWC,IAAEjB,YACde,EAAAhC,EAAAC,cAAA,sBACA+B,EAAAhC,EAAAC,cAAC2G,EAAD,CAAqBhH,SAPb,SAACiH,GACb3H,EAAM4H,QAAQD,EAAOE,gBAOjB/E,EAAAhC,EAAAC,cAAA,OAAKgC,UAAWC,IAAEqE,OAAQF,cCZvBW,EAPUC,YANH,SAACC,GACnB,MAAO,CACHX,MAAOW,EAAMC,YAAYZ,QASd,CAAEO,QAASM,IAAQN,SALbG,CAKwBI,GCelCC,EAhBsB,SAACpI,GAClC,OACI8C,EAAAhC,EAAAC,cAAA,WACI+B,EAAAhC,EAAAC,cAACsH,EAAD,CACI5C,YAAazF,EAAMyF,YACnBD,UAAWxF,EAAMwF,UACjBb,QAAS3E,EAAM2E,QACfb,QAAS9D,EAAM8D,QACfpB,OAAQ1C,EAAM0C,OACdc,aAAcxD,EAAMwD,eAExBV,EAAAhC,EAAAC,cAACuH,EAAD,wBCMNC,2LAEE,IAAIC,GAAyBrI,KAAKH,MAAMyI,MAAMC,OAAOF,OAChDA,IACDA,EAASrI,KAAKH,MAAM2I,eAGhBxI,KAAKH,MAAM4I,QAAQC,KAAK,UAG3BL,GAGDrI,KAAKH,MAAM8I,eAAeN,GAC1BrI,KAAKH,MAAM+I,UAAUP,IAHrBQ,QAAQjF,MAAM,iFAQlB5D,KAAK8I,4DAGUC,EAAsBC,GACjChJ,KAAKH,MAAMyI,MAAMC,OAAOF,SAAWU,EAAUT,MAAMC,OAAOF,QAC1DrI,KAAK8I,kDAKT,OACInG,EAAAhC,EAAAC,cAAA,WACI+B,EAAAhC,EAAAC,cAACqI,EAADhI,OAAAiI,OAAA,GACQlJ,KAAKH,MADb,CAEI2E,SAAUxE,KAAKH,MAAMyI,MAAMC,OAAOF,OAClC1E,QAAS3D,KAAKH,MAAM8D,QACpBpB,OAAQvC,KAAKH,MAAM0C,OACnBc,aAAcrD,KAAKH,MAAMwD,aACzBgC,UAAWrF,KAAKH,MAAMwF,UACtBC,YAAatF,KAAKH,MAAMyF,uBAtCbwB,IAAMqC,WAoDrCjI,EAAA,QAAekI,YACXxB,YARkB,SAACC,GAAD,MAA0B,CAC5ClE,QAASkE,EAAMC,YAAYnE,QAC3BpB,OAAQsF,EAAMC,YAAYvF,OAC1BiG,aAAcX,EAAMwB,KAAKhB,OACzBiB,OAAQzB,EAAMwB,KAAKC,SAIM,CACrBX,mBACAC,cACAvF,iBACAgC,cACAC,kBAEJiE,IARJ,CASEnB","file":"static/js/2.0b305cfb.chunk.js","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React, { Component } from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport PropTypes from 'prop-types';\nimport { withReduxForm } from './ReduxFormContext';\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    if (!props._reduxForm) {\n      throw new Error('Form must be inside a component decorated with reduxForm()');\n    }\n\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {\n    this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _reduxForm = _this$props._reduxForm,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"_reduxForm\"]);\n\n    return React.createElement(\"form\", rest);\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  _reduxForm: PropTypes.object\n};\npolyfill(Form);\nexport default withReduxForm(Form);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"desc\":\"Profileinfo_desc__3JDNv\",\"profileImg\":\"Profileinfo_profileImg__2653U\",\"singleForm\":\"Profileinfo_singleForm__33Vbl\",\"inputPhotos\":\"Profileinfo_inputPhotos__1doWf\",\"contacts\":\"Profileinfo_contacts__3_fqN\",\"contact\":\"Profileinfo_contact__11vDx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noStatusBar\":\"ProfileStatus_noStatusBar__1YbFc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__31UgH\",\"input\":\"MyPosts_input__3aQmq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1hXLk\"};","import React, { useState, useEffect, ChangeEvent } from 'react'\r\nimport s from './ProfileStatus.module.css'\r\n\r\ntype PropsType = {\r\n    updateStatus: (newStatus: string) => void\r\n    status: string\r\n}\r\n\r\nconst ProfileStatus = (props: PropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {!editMode && (\r\n                <div>\r\n                    <b className={s.statusLine}>Status: </b>\r\n                    <span onDoubleClick={activateEditMode}>\r\n                        {props.status || '-------'}\r\n                    </span>\r\n                </div>\r\n            )}\r\n            {editMode && (\r\n                <div>\r\n                    <b className={s.statusLine}>Status: </b>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateEditMode}\r\n                        value={status}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus\r\n","import React from 'react'\r\nimport { Form, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { ProfileType } from '../../../types/types'\r\nimport sform from '../../common/FormsControls/FormsControl.module.css'\r\nimport {\r\n    createField,\r\n    GetStringKeys,\r\n    Input,\r\n    Textarea,\r\n} from '../../common/FormsControls/FormsControls'\r\nimport s from './Profileinfo.module.css'\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> &\r\n    PropsType> = ({ handleSubmit, profile, error }) => {\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <button>Save</button>\r\n            {error && <div className={sform.formSummaryError}>{error}</div>}\r\n            <div className={s.singleForm}>\r\n                <b>Fullname:</b>{' '}\r\n                {createField<ProfileTypeKeys>(\r\n                    'Full name',\r\n                    'fullName',\r\n                    [],\r\n                    Input\r\n                )}\r\n            </div>\r\n\r\n            <div className={s.singleForm}>\r\n                <b>Looking for a job:</b>{' '}\r\n                {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {\r\n                    type: 'checkbox',\r\n                })}\r\n            </div>\r\n            <div className={s.singleForm}>\r\n                <b>Skills and background:</b>{' '}\r\n                {createField<ProfileTypeKeys>(\r\n                    'Skills and background',\r\n                    'lookingForAJobDescription',\r\n                    [],\r\n                    Textarea\r\n                )}\r\n            </div>\r\n\r\n            <div className={s.singleForm}>\r\n                <b>About me:</b>{' '}\r\n                {createField<ProfileTypeKeys>(\r\n                    'About me',\r\n                    'aboutMe',\r\n                    [],\r\n                    Textarea\r\n                )}\r\n            </div>\r\n\r\n            <div className={s.contacts}>\r\n                <b>Contacts:</b>{' '}\r\n                {Object.keys(profile.contacts).map((key) => {\r\n                    // todo: create some solution for embedded objects\r\n                    return (\r\n                        <div key={key} className={s.contact}>\r\n                            <b>{key}: </b>\r\n                            {createField(key, 'contacts.' + key, [], Input)}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({\r\n    form: 'edit-profile',\r\n})(ProfileDataForm)\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nexport default ProfileDataFormReduxForm\r\n","import React, { useState, ChangeEvent } from 'react'\r\nimport s from './Profileinfo.module.css'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileStatus from './ProfileStatus'\r\nimport ProfileDataFormReduxForm from './ProfileDataForm'\r\nimport userPhoto from '../../../assets/images/USER.png'\r\nimport { ProfileType, ContactsType } from '../../../types/types'\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (props: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profileinfo: React.FC<PropsType> = ({\r\n    isOwner,\r\n    profile,\r\n    status,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelect = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={s.ProfileInfo}>\r\n            <div>\r\n                <img\r\n                    className={s.profileImg}\r\n                    src={profile.photos.large || userPhoto}\r\n                    alt=\"\"\r\n                />\r\n                {isOwner && (\r\n                    <div>\r\n                        {/* <label htmlFor=\"inputFile\">Upload photo</label> */}\r\n                        <input\r\n                            className={s.inputPhotos}\r\n                            name=\"inputFile\"\r\n                            type={'file'}\r\n                            onChange={onMainPhotoSelect}\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n                {editMode ? (\r\n                    <ProfileDataFormReduxForm\r\n                        initialValues={profile}\r\n                        onSubmit={onSubmit}\r\n                        profile={profile}\r\n                    />\r\n                ) : (\r\n                    <ProfileData\r\n                        activateEditMode={() => {\r\n                            setEditMode(true)\r\n                        }}\r\n                        profile={profile}\r\n                        isOwner={isOwner}\r\n                    />\r\n                )}\r\n\r\n                <ProfileStatus\r\n                    status={\r\n                        status\r\n                        // ? (\r\n                        //     status\r\n                        // ) : (\r\n                        //     <div className={s.noStatusBar}>\r\n                        //         User Have No Status\r\n                        //     </div>\r\n                        // )\r\n                    }\r\n                    updateStatus={updateStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({\r\n    profile,\r\n    isOwner,\r\n    activateEditMode,\r\n}) => {\r\n    return (\r\n        <div className={s.desc}>\r\n            {isOwner && <button onClick={activateEditMode}>Edit</button>}\r\n\r\n            <div>\r\n                <b>Fullname:</b> {profile.fullName}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job:</b>{' '}\r\n                {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            <div>\r\n                <b>Skills and background:</b>{' '}\r\n                {profile.lookingForAJob && (\r\n                    <div>{profile.lookingForAJobDescription}</div>\r\n                )}\r\n            </div>\r\n\r\n            <div>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n\r\n            <div className={s.contacts}>\r\n                <b>Contacts:</b>{' '}\r\n                {Object.keys(profile.contacts).map((key) => {\r\n                    return (\r\n                        <Contact\r\n                            key={key}\r\n                            contactTitle={key}\r\n                            contactValue={\r\n                                profile.contacts[key as keyof ContactsType]\r\n                            }\r\n                        />\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({\r\n    contactTitle,\r\n    contactValue,\r\n}) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            {contactTitle}: {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profileinfo\r\n","import React from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { required } from '../../../../utils/validators/validators'\r\nimport {\r\n    createField,\r\n    GetStringKeys,\r\n    Input,\r\n} from '../../../common/FormsControls/FormsControls'\r\n\r\ntype PropsType = {}\r\n\r\nexport type AddPostValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostValuesType, PropsType> &\r\n    PropsType> = (props) => {\r\n    return (\r\n        <form action=\"\" onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>(\r\n                    'Post',\r\n                    'newPostText',\r\n                    [required],\r\n                    Input\r\n                )}\r\n            </div>\r\n            <div>\r\n                <button>post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm<AddPostValuesType, PropsType>({\r\n    form: 'profile-add-post',\r\n})(AddPostForm)\r\n","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <h2>\r\n                {' '}\r\n                <img\r\n                    alt=\"\"\r\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTzeQleJAtLe0BrQqEF1NUWfTDWF9MKnymUWBkD0fUDK0D0JTeM8g&s\"\r\n                />\r\n                {props.message}\r\n            </h2>\r\n            <p>Likes {props.likesCount}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport { PostType } from '../../../types/types'\r\nimport AddNewPostFormRedux, {\r\n    AddPostValuesType,\r\n} from './AddPostForm/AddPostForm'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let postsElements = [...props.posts]\r\n        .reverse()\r\n        .map((p) => (\r\n            <Post key={p.id} message={p.message} likesCount={p.likesCount} />\r\n        ))\r\n\r\n    let onAddPost = (values: AddPostValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            <div className={s.posts}>{postsElements}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostsMemoized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemoized\r\n","// import Post from \"./Post/Post\";\r\nimport { actions } from '../../../redux/profile-reducer'\r\nimport MyPosts, { MapPropsType, DispatchPropsType } from './MyPosts'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../../../redux/redux-store'\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    } as MapPropsType\r\n}\r\n\r\nconst MyPostsContainer = connect<\r\n    MapPropsType,\r\n    DispatchPropsType,\r\n    {},\r\n    AppStateType\r\n>(mapStateToProps, { addPost: actions.addPost })(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n","import React from 'react'\r\nimport Profileinfo from './Profileinfo/Profileinfo'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport { ProfileType } from '../../types/types'\r\n\r\ntype PropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (props: ProfileType) => Promise<any>\r\n    profile: ProfileType | null\r\n    status: string\r\n    isOwner: boolean\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <Profileinfo\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react'\r\nimport Profile from './Profile'\r\nimport {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n} from '../../redux/profile-reducer'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { ProfileType } from '../../types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (props: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType &\r\n    DispatchPropsType &\r\n    RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.loggedUserId\r\n            // todo: change history.push to Redirect\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error('userId is missing in URI or state')\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    loggedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatus,\r\n        updateStatus,\r\n        savePhoto,\r\n        saveProfile,\r\n    }),\r\n    withRouter\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}