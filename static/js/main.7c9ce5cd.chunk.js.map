{"version":3,"sources":["hoc/withAuthRedirect.tsx","assets/images/USER.png","redux/dialogue-reducer.ts","assets/images/giphy.gif","components/Navbar/Navbar.module.css","components/common/FormsControls/FormsControls.tsx","serviceWorker.js","api/security-api.ts","components/Header/Header.tsx","api/auth-api.ts","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","components/Music/MusicContainer.jsx","components/Navbar/Navbar.tsx","components/Settings/Settings.tsx","api/users-api.ts","utils/object-helpers.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","hoc/withSuspense.tsx","redux/app-reducer.ts","redux/friends-bar-reducer.ts","redux/redux-store.ts","App.tsx","index.tsx","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControl.module.css","components/Header/Header.module.css","utils/validators/validators.ts","components/Login/Login.module.css","components/common/Paginator/Paginator.module.css","api/api.ts","components/common/Preloader/Preloader.module.css","components/Users/users.module.css","api/profile-api.ts","redux/profile-reducer.ts"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","Object","E_INTITA_PRJ_REACT_start_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","to","module","exports","__webpack_require__","p","initialState","dialoguesData","id","name","messagesData","message","actions","createMessage","newMassageBody","type","dialogueReducer","arguments","length","undefined","action","body","E_INTITA_PRJ_REACT_start_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","concat","E_INTITA_PRJ_REACT_start_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","navbar","item","active","FormControl","_ref","_ref$meta","meta","touched","error","children","hasError","className","s","formControl","Textarea","input","assign","Input","createField","placeholder","validators","component","text","redux_form__WEBPACK_IMPORTED_MODULE_3__","validate","Boolean","window","location","hostname","match","ResultCodesEnum","ResultCodeForCaptcha","Header","react_default","header","alt","src","loginBlock","login","logout","onClick","NavLink","authAPI","instance","get","then","res","data","email","password","rememberMe","captcha","post","delete","securityAPI","userId","isFetching","captchaUrl","payload","getAuthUserData","asyncToGenerator","regenerator_default","mark","_callee","dispatch","meData","_meData$data","_login","wrap","_context","prev","next","sent","resultCode","Success","stop","_x","apply","this","getCaptchaUrl","_ref4","_callee4","_context4","url","_x4","authReducer","objectSpread","HeaderContainer","components_Header_Header","React","Component","_ref3","_callee3","_context3","_x3","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","sform","formSummaryError","submitButton","_ref2","_callee2","_context2","CaptchaIsRequired","messages","stopSubmit","_error","_x2","Redirect","formData","MusicContainer","href","compose","key","Navbar","activeClassName","Settings","usersAPI","getUsers","currentPage","pageSize","follow","unfollow","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","followingInProgress","usersActions","_followUnfollowToggle","apiMethod","actionCreator","_x5","_x6","usersReducer","followed","toConsumableArray","filter","Paginator","totalItemsCount","onPageChanged","_ref$portionSize","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","_useState","useState","_useState2","slicedToArray","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","cn","defineProperty","selectedPage","pageNumber","e","User","user","main","photos","small","userPhoto","disabled","some","status","Users","objectWithoutProperties","common_Paginator_Paginator","Users_User","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","_this","_this$props","Fragment","Preloader","components_Users_Users","bind","_x7","_x8","page","getState","totalCount","withSuspense","react","fallback","initialized","appReducer","friendsBarReducer","rootReducers","combineReducers","profilePage","profileReducer","dialoguesPage","friendsBar","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","__store__","DialoguesContainer","lazy","ProfileContainer","SuspendedDialogues","SuspendedProfile","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","Header_HeaderContainer","components_Navbar_Navbar","Switch","Route","path","render","Music_MusicContainer","components_Settings_Settings","Users_UsersContainer","components_Login_Login","exact","AppContainer","withRouter","promise","Promise","all","SocialApp","BrowserRouter","es","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Preloader_module_css__WEBPACK_IMPORTED_MODULE_1__","_Preloader_module_css__WEBPACK_IMPORTED_MODULE_1___default","_assets_images_giphy_gif__WEBPACK_IMPORTED_MODULE_2__","_assets_images_giphy_gif__WEBPACK_IMPORTED_MODULE_2___default","preCont","preloader","pre","d","__webpack_exports__","MaxLenghtCreator","value","maxLength","checkbox","axios__WEBPACK_IMPORTED_MODULE_0__","axios","create","withCredentials","baseURL","headers","API-KEY","profileAPI","put","photoFile","FormData","append","Content-Type","profile","posts","likesCount","newPostText","addPost","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","getUserProfile","getStatus","updateStatus","t0","savePhoto","file","saveProfile","_ref5","_callee5","_context5","Error","abrupt","reject","newPost"],"mappings":"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","file":"static/js/main.7c9ce5cd.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../redux/redux-store'\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) =>\r\n    ({\r\n        isAuth: state.auth.isAuth,\r\n    } as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(\r\n    WrappedComponent: React.ComponentType<WCP>\r\n) {\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (\r\n        props\r\n    ) => {\r\n        let { isAuth, ...restProps } = props\r\n\r\n        if (!isAuth) return <Redirect to=\"/login\" />\r\n\r\n        return <WrappedComponent {...(restProps as WCP)} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<\r\n        MapPropsType,\r\n        DispatchPropsType,\r\n        WCP,\r\n        AppStateType\r\n    >(\r\n        mapStateToPropsForRedirect,\r\n        {}\r\n    )(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/USER.d6759143.png\";","import { DialogueType, MessageType } from './../types/types';\r\nimport { InferActionsTypes } from './redux-store';\r\n\r\nlet initialState = {\r\n    dialoguesData: [\r\n        { id: 0, name: \"dimych\" },\r\n        { id: 1, name: \"Sveta\" },\r\n        { id: 2, name: \"Dania\" },\r\n        { id: 3, name: \"Diana\" },\r\n        { id: 4, name: \"Velar\" }\r\n    ] as Array<DialogueType>,\r\n    messagesData: [\r\n        { id: 0, message: \"hi\" },\r\n        { id: 1, message: \"Nice\" },\r\n        { id: 2, message: \"Uou\" },\r\n    ] as Array<MessageType>\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    createMessage: (newMassageBody: string) => ({ type: 'SN/DIALOGUES/CREATE-MESSAGE', newMassageBody } as const)\r\n}\r\n\r\n\r\nconst dialogueReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/DIALOGUES/CREATE-MESSAGE':\r\n            let body = action.newMassageBody\r\n\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, { id: 0, message: body }],\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default dialogueReducer","module.exports = __webpack_public_path__ + \"static/media/giphy.1701e2f4.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2kjcl\",\"item\":\"Navbar_item__28tdK\",\"active\":\"Navbar_active__1IpNw\"};","import { FieldValidatorType } from '../../../utils/validators/validators'\r\nimport React from 'react'\r\nimport s from './FormsControl.module.css'\r\nimport { Field, WrappedFieldProps, WrappedFieldMetaProps } from 'redux-form'\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({\r\n    meta: { touched, error },\r\n    children,\r\n}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error} </span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, ...restProps } = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const { input, meta, ...restProps } = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeysType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<WrappedFieldProps>,\r\n    props?: {},\r\n    text?: string\r\n) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                className={s.input}\r\n                validate={validators}\r\n                {...props}\r\n            />\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { instance } from \"./api\"\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    }\r\n}\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}","import React from 'react'\r\nimport s from './Header.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport type MapPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                alt=\"\"\r\n                src=\"https://about.canva.com/en_in/wp-content/uploads/sites/3/2016/08/logos-1.png\"\r\n            />\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? (\r\n                    <div>\r\n                        {props.login}{' '}\r\n                        <button className={s.logout} onClick={props.logout}>\r\n                            Log out\r\n                        </button>\r\n                    </div>\r\n                ) : (\r\n                    <NavLink to={'/login'}>\r\n                        <button className={s.login}>Login</button>\r\n                    </NavLink>\r\n                )}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { ResultCodesEnum, ResultCodeForCaptcha } from './security-api';\r\nimport { ResponseType, instance } from './api';\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<ResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptcha>>(`auth/login`, { email, password, rememberMe, captcha }).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`).then(res => res.data)\r\n    }\r\n}\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}","import { ResultCodeForCaptcha, ResultCodesEnum } from './../api/api'\r\nimport { stopSubmit, ActionTypes } from 'redux-form'\r\nimport { authAPI } from '../api/auth-api'\r\nimport { securityAPI } from '../api/security-api'\r\nimport { BasicThunkType, InferActionsTypes } from './redux-store'\r\nimport { Action } from 'redux'\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    isAuth: false,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isFetching: true,\r\n    captchaUrl: null as string | null //if null - captcha is not required\r\n}\r\n\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET-AUTH-USER-DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        case 'SN/security/GET-CAPTCHA-URL-SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (\r\n        userId: number | null,\r\n        email: string | null,\r\n        login: string | null,\r\n        isAuth: boolean) => ({\r\n            type: 'SN/auth/SET-AUTH-USER-DATA',\r\n            payload: { userId, email, login, isAuth }\r\n        } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'SN/security/GET-CAPTCHA-URL-SUCCESS',\r\n        payload: { captchaUrl }\r\n    } as const)\r\n}\r\n\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        //if we ARE authorised we set isAuth = true\r\n        let { id, login, email } = meData.data\r\n        dispatch(actions.setAuthUserData(id, login, email, true))\r\n    }\r\n}\r\n\r\nexport const login = (\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string): ThunkType => async (dispatch) => {\r\n        let data = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            if (data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n                //if server data with resultCode 10 we need to request captchaUrl\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            let message =\r\n                data.messages.length > 0\r\n                    ? data.messages[0]\r\n                    : 'Some error'\r\n            dispatch(stopSubmit('login', { _error: message }))\r\n        }\r\n    }\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.logout()\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport type InitialStateType = typeof initialState                              // IS\r\ntype ThunkType = BasicThunkType<ActionsType | ReturnType<typeof stopSubmit>>    // thunk\r\ntype ActionsType = InferActionsTypes<typeof actions>                            // actions\r\n\r\n\r\nexport default authReducer\r\n","import React from 'react'\r\nimport Header, { MapPropsType, DispatchPropsType } from './Header'\r\nimport { connect } from 'react-redux'\r\nimport { logout } from '../../redux/auth-reducer'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\nclass HeaderContainer extends React.Component<\r\n    MapPropsType & DispatchPropsType\r\n> {\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n    logout: () => {},\r\n})\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>(\r\n    mapStateToProps,\r\n    { logout }\r\n)(HeaderContainer)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { login } from '../../redux/auth-reducer'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { required } from '../../utils/validators/validators'\r\nimport sform from '../common/FormsControls/FormsControl.module.css'\r\nimport {\r\n    createField,\r\n    Input,\r\n    GetStringKeys,\r\n} from '../common/FormsControls/FormsControls'\r\nimport s from './Login.module.css'\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<\r\n    LoginFormValuesType,\r\n    LoginFormOwnProps\r\n> &\r\n    LoginFormOwnProps> = ({ handleSubmit, error, captchaUrl, children }) => {\r\n    return (\r\n        <form className={s.form} onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                'Email',\r\n                'email',\r\n                [required],\r\n                Input\r\n            )}\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                'Password',\r\n                'password',\r\n                [required],\r\n                Input,\r\n                {\r\n                    type: 'password',\r\n                }\r\n            )}\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                undefined,\r\n                'rememberMe',\r\n                [],\r\n                Input,\r\n                { type: 'checkbox' },\r\n                'remember me'\r\n            )}\r\n\r\n            {captchaUrl && (\r\n                <img alt=\"\" className={s.captcha} src={captchaUrl} />\r\n            )}\r\n            <div>\r\n                {error && <div className={sform.formSummaryError}>{error}</div>}\r\n                {captchaUrl &&\r\n                    createField<LoginFormValuesTypeKeys>(\r\n                        'Symbols from image',\r\n                        'captcha',\r\n                        [required],\r\n                        Input,\r\n                        {}\r\n                    )}\r\n            </div>\r\n            <div>\r\n                <button className={s.submitButton}>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login',\r\n})(LoginForm)\r\n\r\ntype MapStateToPropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (\r\n        email: string,\r\n        password: string,\r\n        rememberMe: boolean,\r\n        captcha: string\r\n    ) => void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nconst Login: React.FC<MapStateToPropsType & MapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(\r\n            formData.email,\r\n            formData.password,\r\n            formData.rememberMe,\r\n            formData.captcha\r\n        )\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login)\r\n","import React from \"react\"\r\nimport s from \"./Music.module.css\"\r\nimport { compose } from \"redux\"\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\"\r\nimport { connect } from \"react-redux\"\r\n\r\nclass MusicContainer extends React.Component {\r\n  render() { return <a href=\"/#\" className={s.name}>Music</a> }\r\n}\r\n\r\nlet mapStateToProps = (userId) => ({\r\n  key: userId\r\n})\r\n\r\nexport default compose(\r\n  withAuthRedirect,\r\n  connect(mapStateToProps, {})\r\n)(MusicContainer)\r\n","import React from 'react'\r\nimport s from './Navbar.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Navbar: React.FC = (props) => {\r\n    return (\r\n        <nav className={s.navbar}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.active}>\r\n                    Profile\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogues\" activeClassName={s.active}>\r\n                    Messages\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/News\" activeClassName={s.active}>\r\n                    News\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/Music\" activeClassName={s.active}>\r\n                    Music\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.active}>\r\n                    Settings\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.active}>\r\n                    Users\r\n                </NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\n\r\nconst Settings: React.FC<any> = (props) => {\r\n    return <div>Settings</div>\r\n}\r\n\r\nexport default Settings\r\n","import { ResponseType, GetItemsType, instance } from './api'\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`).then(res => { return res.data })\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<ResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<ResponseType>\r\n    }\r\n}","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {           //return array if it\r\n        if (u[objPropName] === itemId) {    //see identity of name of 'u' and iteId\r\n            return { ...u, ...newObjProps } //replace old properties with new newObjProps\r\n        }\r\n        return u;\r\n    })\r\n}","import { Dispatch } from 'react'\r\nimport { usersAPI } from '../api/users-api'\r\nimport { updateObjectInArray } from \"../utils/object-helpers\"\r\nimport { UserType } from './../types/types'\r\nimport { BasicThunkType, InferActionsTypes } from './redux-store'\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number> //array of users ids   \r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', { followed: true })\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', { followed: false })\r\n            }\r\n        case 'SN/USERS/SET_USERS': {\r\n            return { ...state, users: action.users }\r\n        }\r\n        case 'SN/USERS/SET_CURRENT_PAGE': {\r\n            return { ...state, currentPage: action.currentPage }\r\n        }\r\n        case 'SN/USERS/SET_USERS_TOTAL_COUNT': {\r\n            return { ...state, totalUsersCount: action.totalUsersCount }\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return { ...state, isFetching: action.isFetching }\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const usersActions = {\r\n    followSuccess: (userId: number) => ({ type: 'SN/USERS/FOLLOW', userId } as const),\r\n    unfollowSuccess: (userId: number) => ({ type: 'SN/USERS/UNFOLLOW', userId } as const),\r\n    setUsers: (users: Array<UserType>) => ({ type: 'SN/USERS/SET_USERS', users } as const),\r\n    setCurrentPage: (currentPage: number) => ({ type: 'SN/USERS/SET_CURRENT_PAGE', currentPage } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({ type: 'SN/USERS/SET_USERS_TOTAL_COUNT', totalUsersCount } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({ type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({ type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId } as const)\r\n}\r\n\r\nexport const requestUsers = (page: number, pageSize: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(usersActions.setCurrentPage(page))\r\n        dispatch(usersActions.toggleIsFetching(true))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(usersActions.toggleIsFetching(false))\r\n        dispatch(usersActions.setUsers(data.items))\r\n        dispatch(usersActions.setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nconst _followUnfollowToggle = async (dispatch: any, userId: number, apiMethod: any, actionCreator: (userId: number) => ActionsTypes) => {\r\n\r\n    dispatch(usersActions.toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(usersActions.toggleFollowingProgress(false, userId))\r\n}\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch: Dispatch<ActionsTypes>) => {\r\n        _followUnfollowToggle(dispatch, userId, usersAPI.follow.bind(usersAPI), usersActions.followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch: Dispatch<ActionsTypes>) => {\r\n        _followUnfollowToggle(dispatch, userId, usersAPI.unfollow.bind(usersAPI), usersActions.unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof usersActions>\r\ntype ThunkType = BasicThunkType<ActionsTypes>\r\n\r\nexport default usersReducer","import React, { useState } from 'react'\r\nimport styles from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({\r\n    totalItemsCount,\r\n    pageSize,\r\n    currentPage,\r\n    onPageChanged,\r\n    portionSize = 10,\r\n}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n    let pages: Array<number> = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {portionNumber > 1 && (\r\n                <button\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber - 1)\r\n                    }}\r\n                >\r\n                    PREV\r\n                </button>\r\n            )}\r\n\r\n            {pages\r\n                .filter(\r\n                    (p) =>\r\n                        p >= leftPortionPageNumber &&\r\n                        p <= rightPortionPageNumber\r\n                )\r\n                .map((p) => {\r\n                    return (\r\n                        <span\r\n                            className={cn(\r\n                                {\r\n                                    [styles.selectedPage]: currentPage === p,\r\n                                },\r\n                                styles.pageNumber\r\n                            )}\r\n                            key={p}\r\n                            onClick={(e) => {\r\n                                onPageChanged(p)\r\n                            }}\r\n                        >\r\n                            {p}\r\n                        </span>\r\n                    )\r\n                })}\r\n            {portionCount > portionNumber && (\r\n                <button\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber + 1)\r\n                    }}\r\n                >\r\n                    NEXT\r\n                </button>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator\r\n","import React from 'react'\r\nimport s from './users.module.css'\r\nimport userPhoto from '../../assets/images/USER.png'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { UserType } from '../../types/types'\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({\r\n    user,\r\n    followingInProgress,\r\n    unfollow,\r\n    follow,\r\n}) => {\r\n    return (\r\n        <div className={s.main}>\r\n            <div>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                    <img\r\n                        src={\r\n                            user.photos.small != null\r\n                                ? user.photos.small\r\n                                : userPhoto\r\n                        }\r\n                        className={s.userPhoto}\r\n                        alt=\"\"\r\n                    />\r\n                </NavLink>\r\n            </div>\r\n            <div>\r\n                {user.followed ? (\r\n                    <button\r\n                        disabled={followingInProgress.some(\r\n                            (id) => id === user.id\r\n                        )}\r\n                        onClick={() => {\r\n                            unfollow(user.id)\r\n                        }}\r\n                    >\r\n                        Unfollow\r\n                    </button>\r\n                ) : (\r\n                    <button\r\n                        disabled={followingInProgress.some(\r\n                            (id) => id === user.id\r\n                        )}\r\n                        onClick={() => {\r\n                            follow(user.id)\r\n                        }}\r\n                    >\r\n                        Follow\r\n                    </button>\r\n                )}\r\n            </div>\r\n            <span>\r\n                <div>{user.name}</div>\r\n                <div>{user.status}</div>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User\r\n","import React from 'react'\r\nimport Paginator from '../common/Paginator/Paginator'\r\nimport User from './User'\r\nimport { UserType } from '../../types/types'\r\n\r\ntype UsersType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet Users: React.FC<UsersType> = ({\r\n    currentPage,\r\n    totalUsersCount,\r\n    pageSize,\r\n    onPageChanged,\r\n    users,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <div>\r\n            <Paginator\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}\r\n                totalItemsCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n            />\r\n            <div>\r\n                {users.map((u) => (\r\n                    <User\r\n                        user={u}\r\n                        followingInProgress={props.followingInProgress}\r\n                        key={u.id}\r\n                        unfollow={props.unfollow}\r\n                        follow={props.follow}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users\r\n","import { AppStateType } from './redux-store'\r\nimport { createSelector } from \"reselect\"\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { follow, unfollow, requestUsers } from '../../redux/users-reducer'\r\nimport Users from './Users'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport { compose } from 'redux'\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n} from '../../redux/users-selectors'\r\nimport { UserType } from '../../types/types'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsers: (currentPage: number, pageNumber: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype OwnProps = {}\r\n\r\ntype PropsType = MapDispatchPropsType & MapStatePropsType & OwnProps\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        const { currentPage, pageSize } = this.props\r\n        this.props.getUsers(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const { pageSize } = this.props\r\n        this.props.getUsers(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader /> : null}\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnProps, AppStateType>(\r\n        mapStateToProps,\r\n        { follow, unfollow, getUsers: requestUsers }\r\n    )\r\n)(UsersContainer)\r\n","import React, { Suspense } from 'react'\r\nimport Preloader from '../components/common/Preloader/Preloader'\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return (\r\n            <Suspense fallback={<Preloader />}>\r\n                <WrappedComponent {...props} />\r\n            </Suspense>\r\n        )\r\n    }\r\n}\r\n","import { InferActionsTypes } from './redux-store';\r\nimport { getAuthUserData } from \"./auth-reducer\"\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/SET-INITIALIZED':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// export const initializingSuccess = (): InitialSuccessActionType => ({\r\n//     type: INITIALIZED_SUCCESS\r\n// })\r\n\r\nexport const actions = {\r\n    initializingSuccess: () => ({\r\n        type: 'SN/APP/SET-INITIALIZED'\r\n    } as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise]).then(() => { //if all promises that are in [] brackets are returned *then* we will change initializing to true\r\n        dispatch(actions.initializingSuccess())\r\n    })\r\n\r\n}\r\n\r\nexport default appReducer","let initialState = {\r\n\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\nconst friendsBarReducer = (state = initialState, action: any) => {\r\n\r\n    return state\r\n}\r\n\r\nexport default friendsBarReducer","import { combineReducers, createStore, Action } from \"redux\"\r\n\r\nimport dialogueReducer from \"./dialogue-reducer\"\r\nimport profileReducer from \"./profile-reducer\"\r\nimport friendsBarReducer from \"./friends-bar-reducer\"\r\nimport usersReducer from \"./users-reducer\"\r\nimport authReducer from \"./auth-reducer\"\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\"\r\nimport { applyMiddleware } from \"redux\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\"\r\nimport { compose } from \"redux\"\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialoguesPage: dialogueReducer,\r\n    friendsBar: friendsBarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n})\r\n\r\ntype rootReducerType = typeof rootReducers\r\nexport type AppStateType = ReturnType<rootReducerType>\r\nexport type BasicThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n\r\n// type PropertiesType<T> = T extends { [key: string]: infer U } ? U : never // T extends obj that has property key, then find out what is type of U\r\n\r\n// export type InferActionsTypes<T extends { [key: string]: (...arg: any) => any }> = ReturnType<PropertiesType<T>>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nlet store = createStore(rootReducers, compose(\r\n    applyMiddleware(thunkMiddleware),\r\n    //@ts-ignore\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n))\r\n\r\n//@ts-ignore\r\nwindow.__store__ = store //get store from console.log(store.getState()...)\r\n\r\nexport default store","import React from 'react'\nimport { connect, Provider } from 'react-redux'\nimport {\n    BrowserRouter,\n    Redirect,\n    Route,\n    Switch,\n    withRouter,\n} from 'react-router-dom'\nimport { compose } from 'redux'\nimport './App.css'\nimport Preloader from './components/common/Preloader/Preloader'\nimport HeaderContainer from './components/Header/HeaderContainer'\nimport Login from './components/Login/Login'\nimport MusicContainer from './components/Music/MusicContainer'\nimport Navbar from './components/Navbar/Navbar'\nimport NewsContainer from './components/News/NewsContainer'\nimport Settings from './components/Settings/Settings'\nimport UsersContainer from './components/Users/UsersContainer'\nimport { withSuspense } from './hoc/withSuspense'\nimport { initializeApp } from './redux/app-reducer'\nimport store, { AppStateType } from './redux/redux-store'\n\nconst DialoguesContainer = React.lazy(() =>\n    import('./components/Dialogues/DialoguesContainer')\n)\nconst ProfileContainer = React.lazy(() =>\n    import('./components/Profile/ProfileContainer')\n)\n\nconst SuspendedDialogues = withSuspense(DialoguesContainer)\nconst SuspendedProfile = withSuspense(ProfileContainer)\n\ntype MapPropsType = ReturnType<typeof MapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert('Error')\n    }\n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener(\n            'unhandledrejection',\n            this.catchAllUnhandledErrors\n        )\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\n            'unhandledrejection',\n            this.catchAllUnhandledErrors\n        )\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader />\n        } else {\n            return (\n                <div className=\"app-wrapper\">\n                    <HeaderContainer />\n                    <Navbar />\n                    <div className=\"app-wrapper-content\">\n                        <Switch>\n                            <Route\n                                path=\"/profile/:UserId?\"\n                                render={() => <SuspendedProfile />}\n                            />\n                            <Route\n                                path=\"/dialogues\"\n                                render={() => <SuspendedDialogues />}\n                            />\n                            {/* <Route\n                                path=\"/news\"\n                                render={() => <NewsContainer />}\n                            /> */}\n                            <Route\n                                path=\"/music\"\n                                render={() => <MusicContainer />}\n                            />\n                            <Route\n                                path=\"/settings\"\n                                render={() => <Settings />}\n                            />\n                            <Route\n                                path=\"/users\"\n                                render={() => <UsersContainer />}\n                            />\n                            <Route path=\"/login\" render={() => <Login />} />\n                            <Route\n                                exact\n                                path=\"/\"\n                                render={() => <Redirect to=\"/profile\" />}\n                            />\n                            <Route\n                                path=\"*\"\n                                render={() => (\n                                    <div className=\"notFoundPage\">\n                                        <h1>404</h1>\n                                        <h3>Page not found</h3>\n                                    </div>\n                                )}\n                            />\n                        </Switch>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nconst MapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized,\n})\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(MapStateToProps, { initializeApp })\n)(App)\n\nconst SocialApp: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <Provider store={store}>\n                <AppContainer />\n            </Provider>\n        </BrowserRouter>\n    )\n}\n\nexport default SocialApp\n","import * as serviceWorker from './serviceWorker'\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport SocialApp from \"./App\"\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n\r\n    <SocialApp />\r\n    , document.getElementById('root'))\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()","import React from 'react'\r\nimport s from './Preloader.module.css'\r\nimport preloader from '../../../assets/images/giphy.gif'\r\n\r\ntype PropsType = {}\r\n\r\nlet Preloader: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.preCont}>\r\n            <img src={preloader} className={s.pre} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__3SIH-\",\"error\":\"FormsControl_error__1pbcI\",\"formSummaryError\":\"FormsControl_formSummaryError__L67C3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__36NqA\",\"loginBlock\":\"Header_loginBlock__3KzqO\",\"login\":\"Header_login__ZyVn2\",\"logout\":\"Header_logout__27a0M\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (!value) {\r\n        return 'No empty fields accepted'\r\n    }\r\n    return undefined\r\n}\r\n\r\nexport const MaxLenghtCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\nexport const MinLenghtCreator = (minLength: number): FieldValidatorType => (value) => {\r\n    if (value.length < minLength) return `Min length is ${minLength} symbols`\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__1Otgr\",\"input\":\"Login_input__3J7m8\",\"checkbox\":\"Login_checkbox__2Otj8\",\"submitButton\":\"Login_submitButton__3RD7J\",\"captcha\":\"Login_captcha__1syvN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__2o8x0\"};","import { ProfileType, UserType } from './../types/types'\r\nimport axios, { AxiosResponse } from \"axios\"\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": '36b96517-179a-4aca-8588-54832599e6d7'\r\n    }\r\n})\r\n\r\nexport type ResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preCont\":\"Preloader_preCont__2UxB6\",\"pre\":\"Preloader_pre__2KZtP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__350eH\",\"main\":\"users_main__1Mx0T\"};","import { SavePhotoResponseDataType } from './../redux/profile-reducer';\r\nimport { ProfileType, PhotosType } from './../types/types';\r\nimport { instance, ResponseType } from './api';\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ResponseType>(`profile/status`, { status: status }).then(res => res.data) //update status on server from taken user status\r\n    },\r\n    savePhotos(photoFile: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<ResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<ResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n}","import { InferActionsTypes, BasicThunkType } from './redux-store';\r\nimport { PostType, ProfileType, PhotosType } from './../types/types'\r\nimport { profileAPI } from \"../api/profile-api\"\r\nimport { stopSubmit, FormAction } from \"redux-form\"\r\n\r\nexport type SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 0, message: \"How\", likesCount: 0 },\r\n        { id: 1, message: \"Nice\", likesCount: 55 }\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    newPostText: ''\r\n}\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SN/PROFILE/ADD-POST':\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n\r\n        case 'SN/PROFILE/SET-USER-PROFILE':\r\n            return { ...state, profile: action.profile }\r\n        case 'SN/PROFILE/SET-STATUS':\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case 'SN/PROFILE/DELETE-POST':\r\n            return { ...state, posts: state.posts.filter(p => p.id != action.postId) }\r\n\r\n        case 'SN/PROFILE/SAVE-PHOTO-SUCCESS':\r\n            return { ...state, profile: { ...state.profile, photos: action.photos } as ProfileType }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n    addPost: (newPostText: string) => ({ type: 'SN/PROFILE/ADD-POST', newPostText } as const),\r\n\r\n    setUserProfile: (profile: ProfileType) => ({ type: 'SN/PROFILE/SET-USER-PROFILE', profile } as const),\r\n\r\n    setStatus: (status: string) => ({ type: 'SN/PROFILE/SET-STATUS', status } as const),\r\n\r\n    deletePost: (postId: number) => ({ type: 'SN/PROFILE/DELETE-POST', postId } as const),\r\n\r\n    savePhotoSuccess: (photos: PhotosType) => ({ type: 'SN/PROFILE/SAVE-PHOTO-SUCCESS', photos } as const),\r\n\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId)\r\n\r\n    dispatch(actions.setUserProfile(data))\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n\r\n    dispatch(actions.setStatus(data))\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status)\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setStatus(status))\r\n        }\r\n    } catch (error) {\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhotos(file)\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n    // alert(response.data)\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(`userId can't be null`)\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", { _error: data.messages[0] }))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = BasicThunkType<ActionsType | FormAction>\r\n\r\nexport default profileReducer\r\n"],"sourceRoot":""}