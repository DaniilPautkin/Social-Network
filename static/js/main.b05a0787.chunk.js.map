{"version":3,"sources":["styles/App-styles.tsx","utils/validators/validators.ts","components/common/FormsControls/FormsControl.module.css","api/api.ts","components/common/Paginator/Paginator.module.css","assets/images/USER.png","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogue-reducer.ts","assets/images/giphy.gif","styles/FormsControls-styles.tsx","components/common/FormsControls/FormsControls.tsx","serviceWorker.js","styles/Header-styles.tsx","components/Header/Header.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","styles/Login-styles.tsx","components/Login/Login.tsx","components/Music/Music.tsx","components/Music/MusicContainer.tsx","styles/Navbar-styles.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/News/NewsContainer.tsx","components/Settings/Settings.tsx","api/users-api.ts","utils/object-helpers.ts","redux/users-reducer.ts","styles/Users-styles.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","hoc/withSuspense.tsx","redux/app-reducer.ts","redux/friends-bar-reducer.ts","redux/redux-store.ts","App.tsx","index.tsx","components/common/Preloader/Preloader.tsx","hoc/withAuthRedirect.tsx"],"names":["Colors","mainColor","secondColor","greenColor","lightGreen","redColor","blueColor","MainWrapper","styled","div","Main","StyledPreloader","StyledButton","Button","StyledPaginator","Page","StyledPaginatorPage","required","value","MaxLenghtCreator","maxLength","length","module","exports","instance","axios","create","withCredentials","baseURL","headers","ResultCodesEnum","ResultCodeForCaptcha","profileAPI","getProfile","userId","get","then","res","data","getStatus","updateStatus","status","put","savePhotos","photoFile","formData","FormData","append","saveProfile","profile","initialState","posts","id","message","likesCount","newPostText","actions","addPost","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","resultCode","savePhoto","file","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialoguesData","name","messagesData","createMessage","newMassageBody","dialogueReducer","body","FormSummaryError","StyledTextArea","TextArea","StyledCheckbox","Checkbox","StyledInput","Input","StyledField","ErrorSpan","FormControl","meta","touched","error","children","hasError","className","s","formControl","RFTextarea","props","input","restProps","RFInput","RFCheckbox","createField","placeholder","validators","component","text","validate","Boolean","window","location","hostname","match","StyledHeader","AuthContainer","Logo","NavLink","img","Header","alt","src","isAuth","login","onClick","logout","to","authAPI","me","email","password","rememberMe","captcha","post","delete","securityAPI","getCaptchaUrl","isFetching","captchaUrl","payload","getAuthUserData","meData","Success","url","authReducer","HeaderContainer","React","Component","render","this","connect","StyledLoginForm","Form","Captcha","LoginReduxForm","reduxForm","form","handleSubmit","CaptchaIsRequired","Redirect","onSubmit","Music","code","MusicContainer","compose","withAuthRedirect","key","StyledNavBar","NavItem","StyledNavnarNavLink","Navbar","activeClassName","News","NewsContainer","Settings","usersAPI","getUsers","currentPage","pageSize","follow","unfollow","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","followingInProgress","usersActions","_followUnfollowToggle","apiMethod","actionCreator","usersReducer","followed","UserPhoto","UserContainer","main","StyledUsersContainer","span","UsersPage","UserName","UserInfo","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","CaretLeftOutlined","cn","styles","selectedPage","pageNumber","e","CaretRightOutlined","User","user","small","userPhoto","disabled","some","Users","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","componentDidMount","Preloader","bind","page","totalCount","withSuspense","WrappedComponent","fallback","initialized","appReducer","friendsBarReducer","rootReducers","combineReducers","profilePage","dialoguesPage","friendsBar","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","__store__","DialoguesContainer","lazy","ProfileContainer","SuspendedDialogues","SuspendedProfile","App","catchAllUnhandledErrors","reason","document","title","initializeApp","addEventListener","componentWillUnmount","removeEventListener","Switch","Route","path","exact","AppContainer","withRouter","promise","all","SocialApp","HashRouter","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","preloader","mapStateToPropsForRedirect"],"mappings":"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","file":"static/js/main.b05a0787.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nimport { Button } from 'antd'\r\n\r\n// Colors\r\n\r\nexport const Colors = {\r\n    mainColor: '#24292E',\r\n    secondColor: '#FAFBFC',\r\n    greenColor: '#28A745',\r\n    lightGreen: '#40C463',\r\n    redColor: '#EC6E61',\r\n    blueColor: '#0366D6',\r\n}\r\n\r\nexport const MainWrapper = styled.div`\r\n    margin: 0 auto;\r\n    /* grid-gap: 10px; */\r\n    /* margin-top: 10px; */\r\n    margin-bottom: 10px;\r\n    display: grid;\r\n    width: 1200px;\r\n    grid-template-rows: 60px 1fr;\r\n    grid-template-columns: 2fr 10fr;\r\n    grid-template-areas:\r\n        'head head'\r\n        'navbar cont';\r\n\r\n    @media screen and (max-width: 900px) {\r\n        width: 100%;\r\n    }\r\n`\r\n\r\nexport const Main = styled.div`\r\n    border-radius: 5px;\r\n    color: black;\r\n    padding: 10px;\r\n    background: #fafbfc;\r\n    grid-area: cont;\r\n\r\n    @media screen and (max-width: 900px) {\r\n        border-bottom-right-radius: 0;\r\n    }\r\n`\r\n\r\nexport const StyledPreloader = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n    img {\r\n        height: 50px;\r\n    }\r\n`\r\n\r\nexport const StyledButton = styled(Button)`\r\n    border-radius: 5px;\r\n    :hover {\r\n        border: 1px solid ${Colors.greenColor};\r\n        color: ${Colors.greenColor};\r\n    }\r\n\r\n    :focus,\r\n    :active {\r\n        background: ${Colors.greenColor};\r\n        border: 1px solid ${Colors.greenColor};\r\n        color: #fff;\r\n    }\r\n`\r\n\r\nexport const StyledPaginator = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    .selectedPage {\r\n        color: #ffffff;\r\n        border-radius: 10px;\r\n        background-color: rgb(255, 38, 0);\r\n        font-weight: bold;\r\n    }\r\n`\r\n\r\nexport const Page = styled.div`\r\n    padding: 5px;\r\n    margin: 3px;\r\n    border-radius: 100px;\r\n    cursor: pointer;\r\n    :hover {\r\n        color: ${Colors.redColor};\r\n    }\r\n    .selectedPage:hover {\r\n        background: rgba(0, 0, 0, 0);\r\n        color: #000;\r\n    }\r\n`\r\n\r\nexport const StyledPaginatorPage = styled.div`\r\n    /* width: 100%;     */\r\n    /* margin: 0 auto; */\r\n    justify-content: center;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    margin: 10px 0px 10px 0px;\r\n`\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (!value) {\r\n        return 'No empty fields accepted'\r\n    }\r\n    return undefined\r\n}\r\n\r\nexport const MaxLenghtCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\nexport const MinLenghtCreator = (minLength: number): FieldValidatorType => (value) => {\r\n    if (value.length < minLength) return `Min length is ${minLength} symbols`\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__x_Lvf\",\"error\":\"FormsControl_error__28ug-\",\"formSummaryError\":\"FormsControl_formSummaryError__1dDnV\"};","import axios from \"axios\"\r\nimport { UserType } from './../types/types'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": '53f0549c-b924-465b-83a1-97a7e4bf03d6'\r\n    }\r\n})\r\n\r\nexport type ResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__3OeQX\"};","module.exports = __webpack_public_path__ + \"static/media/USER.d6759143.png\";","import { SavePhotoResponseDataType } from './../redux/profile-reducer';\r\nimport { ProfileType } from './../types/types';\r\nimport { instance, ResponseType } from './api';\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ResponseType>(`profile/status`, { status: status }).then(res => res.data) //update status on server from taken user status\r\n    },\r\n    savePhotos(photoFile: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<ResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<ResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n}","import { FormAction, stopSubmit } from \"redux-form\";\r\nimport { profileAPI } from \"../api/profile-api\";\r\nimport { PhotosType, PostType, ProfileType } from './../types/types';\r\nimport { BasicThunkType, InferActionsTypes } from './redux-store';\r\n\r\nexport type SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 0, message: \"Dummy\", likesCount: 0 },\r\n        { id: 1, message: \"Data\", likesCount: 55 }\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    newPostText: ''\r\n}\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SN/PROFILE/ADD-POST':\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n\r\n        case 'SN/PROFILE/SET-USER-PROFILE':\r\n            return { ...state, profile: action.profile }\r\n        case 'SN/PROFILE/SET-STATUS':\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case 'SN/PROFILE/DELETE-POST':\r\n            return { ...state, posts: state.posts.filter(p => p.id !== action.postId) }\r\n\r\n        case 'SN/PROFILE/SAVE-PHOTO-SUCCESS':\r\n            return { ...state, profile: { ...state.profile, photos: action.photos } as ProfileType }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n    addPost: (newPostText: string) => ({ type: 'SN/PROFILE/ADD-POST', newPostText } as const),\r\n\r\n    setUserProfile: (profile: ProfileType) => ({ type: 'SN/PROFILE/SET-USER-PROFILE', profile } as const),\r\n\r\n    setStatus: (status: string) => ({ type: 'SN/PROFILE/SET-STATUS', status } as const),\r\n\r\n    deletePost: (postId: number) => ({ type: 'SN/PROFILE/DELETE-POST', postId } as const),\r\n\r\n    savePhotoSuccess: (photos: PhotosType) => ({ type: 'SN/PROFILE/SAVE-PHOTO-SUCCESS', photos } as const),\r\n\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId)\r\n\r\n    dispatch(actions.setUserProfile(data))\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n\r\n    dispatch(actions.setStatus(data))\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status)\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setStatus(status))\r\n        }\r\n    } catch (error) {\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhotos(file)\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n    // alert(response.data)\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(`userId can't be null`)\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", { _error: data.messages[0] }))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = BasicThunkType<ActionsType | FormAction>\r\n\r\nexport default profileReducer\r\n","import { DialogueType, MessageType } from './../types/types';\r\nimport { InferActionsTypes } from './redux-store';\r\n\r\nlet initialState = {\r\n    dialoguesData: [\r\n        { id: 0, name: 'Dummy' },\r\n        { id: 1, name: 'Messages' }\r\n        // { id: 0, name: \"dimych\" },\r\n        // { id: 1, name: \"Sveta\" },\r\n        // { id: 2, name: \"Dania\" },\r\n        // { id: 3, name: \"Diana\" },\r\n        // { id: 4, name: \"Velar\" }\r\n    ] as Array<DialogueType>,\r\n    messagesData: [\r\n        { id: 0, message: \"Still\" },\r\n        { id: 1, message: \"In\" },\r\n        { id: 2, message: \"Progress\" },\r\n    ] as Array<MessageType>\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    createMessage: (newMassageBody: string) => ({ type: 'SN/DIALOGUES/CREATE-MESSAGE', newMassageBody } as const)\r\n}\r\n\r\n\r\nconst dialogueReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/DIALOGUES/CREATE-MESSAGE':\r\n            let body = action.newMassageBody\r\n\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, { id: 0, message: body }],\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default dialogueReducer","module.exports = __webpack_public_path__ + \"static/media/giphy.1701e2f4.gif\";","import { Checkbox, Input } from 'antd'\r\nimport TextArea from 'antd/lib/input/TextArea'\r\nimport styled from 'styled-components'\r\nimport { Colors } from './App-styles'\r\n\r\n/* \r\nexport const FormError = styled.formControl.error input,\r\n.formControl.error textarea \r\n`\r\n    border: 2px solid red;\r\n`\r\n\r\nexport const  = styled.formControl.error span `\r\n    color: red\r\n` */\r\n\r\nexport const FormSummaryError = styled.div`\r\n    cursor: default;\r\n    padding: 3px;\r\n    margin: 0 10px 0 10px;\r\n    display: inline;\r\n    border: 2px solid ${Colors.redColor};\r\n    border-radius: 5px;\r\n    color: ${Colors.redColor};\r\n`\r\n\r\nexport const StyledTextArea = styled(TextArea)`\r\n    resize: none;\r\n    border-radius: 5px;\r\n    /* margin: 0px 5px 0px 5px; */\r\n    :hover,\r\n    :active,\r\n    :focus {\r\n        box-shadow: none;\r\n        border: 1px solid ${Colors.greenColor};\r\n    }\r\n`\r\n\r\nexport const StyledCheckbox = styled(Checkbox)`\r\n    .ant-checkbox-checked .ant-checkbox-inner {\r\n        background-color: ${Colors.greenColor};\r\n        border-color: ${Colors.greenColor};\r\n    }\r\n`\r\n\r\nexport const StyledInput = styled(Input)`\r\n    border-radius: 5px;\r\n    transition: 0.3s ease-in-out;\r\n    :hover,\r\n    :active,\r\n    :focus {\r\n        box-shadow: none;\r\n        border: 1px solid ${Colors.greenColor};\r\n    }\r\n    /* margin: 0px 5px 0px 5px; */\r\n`\r\n\r\nexport const StyledField = styled.div`\r\n    /* padding: 10px; */\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: flex-start;\r\n    flex-direction: column;\r\n    font-weight: 500;\r\n    Text {\r\n        cursor: default;\r\n        margin-left: 0;\r\n    }\r\n    input[type='checkbox'] {\r\n        cursor: pointer;\r\n        margin-left: 5px;\r\n        margin-right: 5px;\r\n        height: 13px;\r\n        width: 13px;\r\n        min-width: 13px;\r\n    }\r\n    /* margin-bottom: 5px; */\r\n`\r\n\r\nexport const ErrorSpan = styled.div`\r\n    padding: 10px !important;\r\n    margin: 10px !important;\r\n    display: none !important;\r\n`\r\n","import Text from 'antd/lib/typography/Text'\r\nimport React from 'react'\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form'\r\nimport {\r\n    ErrorSpan,\r\n    StyledCheckbox,\r\n    StyledField,\r\n    StyledInput,\r\n    StyledTextArea,\r\n} from '../../../styles/FormsControls-styles'\r\nimport { FieldValidatorType } from '../../../utils/validators/validators'\r\nimport s from './FormsControl.module.css'\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({\r\n    meta: { touched, error },\r\n    children,\r\n}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        // FIX: className\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <div>{children}</div>\r\n                {hasError && <ErrorSpan>{error} </ErrorSpan>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const RFTextarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, ...restProps } = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <StyledTextArea {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const RFInput = (props: any) => {\r\n    const { input, meta, ...restProps } = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <StyledInput {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const RFCheckbox = (props: any) => {\r\n    const { input, meta, ...restProps } = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <StyledCheckbox {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeysType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<WrappedFieldProps>,\r\n    props?: {},\r\n    text?: string\r\n) {\r\n    return (\r\n        <StyledField>\r\n            {!!text ? <Text>{text}</Text> : ''}\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            />\r\n        </StyledField>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import styled from 'styled-components'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport const StyledHeader = styled.div`\r\n    z-index: 1;\r\n    /* border-radius: 5px; */\r\n    flex-direction: row;\r\n    align-items: center;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    grid-area: head;\r\n    background: #0b0c10;\r\n\r\n    img {\r\n        border-radius: 20px;\r\n        margin: 5px;\r\n        height: 50px;\r\n    }\r\n\r\n    @media screen and (max-width: 900px) {\r\n        border-top-left-radius: 0px;\r\n        border-top-right-radius: 0px;\r\n    }\r\n`\r\n\r\nexport const AuthContainer = styled.div`\r\n    text-decoration: none;\r\n    color: #ffffff;\r\n    margin: 0px 5px 0px 5px;\r\n`\r\n\r\nexport const LoginLink = styled(NavLink)`\r\n    background-color: rgba(0, 0, 0, 0);\r\n    color: #fff;\r\n    border-radius: 5px;\r\n`\r\n\r\nexport const Logo = styled.img``\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { StyledButton } from '../../styles/App-styles'\r\nimport { AuthContainer, Logo, StyledHeader } from '../../styles/Header-styles'\r\n\r\nexport type MapPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    return (\r\n        <StyledHeader>\r\n            <Logo\r\n                alt=\"\"\r\n                src=\"https://about.canva.com/en_in/wp-content/uploads/sites/3/2016/08/logos-1.png\"\r\n            />\r\n            <AuthContainer>\r\n                {props.isAuth ? (\r\n                    <AuthContainer>\r\n                        {props.login}{' '}\r\n                        <StyledButton onClick={props.logout}>\r\n                            Log out\r\n                        </StyledButton>\r\n                    </AuthContainer>\r\n                ) : (\r\n                    <NavLink to={'/login'}>\r\n                        <StyledButton>Login</StyledButton>\r\n                    </NavLink>\r\n                )}\r\n            </AuthContainer>\r\n        </StyledHeader>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { ResultCodesEnum, ResultCodeForCaptcha } from './security-api';\r\nimport { ResponseType, instance } from './api';\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<ResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptcha>>(`auth/login`, { email, password, rememberMe, captcha }).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`).then(res => res.data)\r\n    }\r\n}\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}","import { instance } from \"./api\"\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    }\r\n}\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}","import { stopSubmit } from 'redux-form'\r\nimport { authAPI } from '../api/auth-api'\r\nimport { securityAPI } from '../api/security-api'\r\nimport { ResultCodeForCaptcha, ResultCodesEnum } from './../api/api'\r\nimport { BasicThunkType, InferActionsTypes } from './redux-store'\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    isAuth: false,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isFetching: true,\r\n    captchaUrl: null as string | null //if null - captcha is not required\r\n}\r\n\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET-AUTH-USER-DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        case 'SN/security/GET-CAPTCHA-URL-SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (\r\n        userId: number | null,\r\n        login: string | null,\r\n        email: string | null,\r\n        isAuth: boolean) => ({\r\n            type: 'SN/auth/SET-AUTH-USER-DATA',\r\n            payload: { userId, login, email, isAuth }\r\n        } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'SN/security/GET-CAPTCHA-URL-SUCCESS',\r\n        payload: { captchaUrl }\r\n    } as const)\r\n}\r\n\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        //if we ARE authorised we set isAuth = true\r\n        let { id, login, email } = meData.data\r\n        dispatch(actions.setAuthUserData(id, login, email, true))\r\n    }\r\n}\r\n\r\nexport const login = (\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string): ThunkType => async (dispatch) => {\r\n        let data = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            if (data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n                //if server data with resultCode 10 we need to request captchaUrl\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            let message =\r\n                data.messages.length > 0\r\n                    ? data.messages[0]\r\n                    : 'Some error'\r\n            dispatch(stopSubmit('login', { _error: message }))\r\n        }\r\n    }\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.logout()\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport type InitialStateType = typeof initialState                              // IS\r\ntype ThunkType = BasicThunkType<ActionsType | ReturnType<typeof stopSubmit>>    // thunk\r\ntype ActionsType = InferActionsTypes<typeof actions>                            // actions\r\n\r\n\r\nexport default authReducer\r\n","import React from 'react'\r\nimport Header, { MapPropsType, DispatchPropsType } from './Header'\r\nimport { connect } from 'react-redux'\r\nimport { logout } from '../../redux/auth-reducer'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\nclass HeaderContainer extends React.Component<\r\n    MapPropsType & DispatchPropsType\r\n> {\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n    logout: () => {},\r\n})\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>(\r\n    mapStateToProps,\r\n    { logout }\r\n)(HeaderContainer)\r\n","import styled from 'styled-components'\r\nimport Form from 'antd/lib/form/Form'\r\nimport { Checkbox, Input, Button } from 'antd'\r\n\r\nexport const StyledLoginForm = styled(Form)`\r\n    margin: 0 auto;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    Input {\r\n        margin: 10px 0px 10px 0px;\r\n    }\r\n`\r\n\r\nexport const SubmitLoginButton = styled(Button)``\r\n\r\nexport const InputFormContainer = styled(Input)`\r\n    margin-bottom: 10px;\r\n`\r\n\r\nexport const CheckBox = styled(Checkbox)`\r\n    :hover {\r\n        margin-top: 5px;\r\n        margin-bottom: 5px;\r\n        user-select: none;\r\n        transform: scale(1.1);\r\n    }\r\n`\r\n\r\nexport const Captcha = styled.img`\r\n    margin: 10px 0px 10px 0px;\r\n    border-radius: 10px;\r\n`\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { login } from '../../redux/auth-reducer'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { StyledButton } from '../../styles/App-styles'\r\nimport { FormSummaryError } from '../../styles/FormsControls-styles'\r\nimport { Captcha, StyledLoginForm } from '../../styles/Login-styles'\r\nimport { required } from '../../utils/validators/validators'\r\nimport {\r\n    createField,\r\n    GetStringKeys,\r\n    RFInput,\r\n} from '../common/FormsControls/FormsControls'\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<\r\n    InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> &\r\n        LoginFormOwnProps\r\n> = ({ handleSubmit, error, captchaUrl, children }) => {\r\n    return (\r\n        <StyledLoginForm>\r\n            {/* <Text>Login</Text> */}\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                'Email',\r\n                'email',\r\n                [required],\r\n                RFInput,\r\n                {},\r\n                'Email'\r\n            )}\r\n            {createField<LoginFormValuesTypeKeys>(\r\n                'Password',\r\n                'password',\r\n                [required],\r\n                RFInput,\r\n                {\r\n                    type: 'password',\r\n                },\r\n                'Password'\r\n            )}\r\n            {/* {createField<LoginFormValuesTypeKeys>(\r\n                undefined,\r\n                'rememberMe',\r\n                [],\r\n                RFCheckbox,\r\n                {},\r\n                'remember me'\r\n            )} */}\r\n\r\n            {captchaUrl && <Captcha src={captchaUrl} />}\r\n            <div>\r\n                {error && <FormSummaryError>{error}</FormSummaryError>}\r\n                {captchaUrl &&\r\n                    createField<LoginFormValuesTypeKeys>(\r\n                        'Symbols from image',\r\n                        'captcha',\r\n                        [required],\r\n                        RFInput,\r\n                        {}\r\n                    )}\r\n            </div>\r\n            <div>\r\n                <StyledButton onClick={handleSubmit}>Login</StyledButton>\r\n            </div>\r\n        </StyledLoginForm>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login',\r\n})(LoginForm)\r\n\r\ntype MapStateToPropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (\r\n        email: string,\r\n        password: string,\r\n        rememberMe: boolean,\r\n        captcha: string\r\n    ) => void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nconst Login: React.FC<MapStateToPropsType & MapDispatchPropsType> = (props) => {\r\n    const submit = (formData: LoginFormValuesType) => {\r\n        props.login(\r\n            formData.email,\r\n            formData.password,\r\n            formData.rememberMe,\r\n            formData.captcha\r\n        )\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <LoginReduxForm onSubmit={submit} captchaUrl={props.captchaUrl} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login)\r\n","import Text from 'antd/lib/typography/Text'\r\nimport React from 'react'\r\n\r\nconst Music: React.FC<any> = () => {\r\n    return <Text code>In Progress</Text>\r\n}\r\n\r\nexport default Music\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport Music from './Music'\r\n\r\nclass MusicContainer extends React.Component {\r\n    render() {\r\n        return <Music />\r\n    }\r\n}\r\n// todo: fix\r\nlet mapStateToProps = (userId: any) => ({\r\n    key: userId,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {})\r\n)(MusicContainer)\r\n","import styled from 'styled-components'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Colors } from './App-styles'\r\n\r\nexport const StyledNavBar = styled.div`\r\n    border-bottom-left-radius: 5px;\r\n    padding: 20px;\r\n    grid-auto-flow: row;\r\n    background: ${Colors.mainColor};\r\n    grid-area: navbar;\r\n\r\n    @media screen and (max-width: 900px) {\r\n        border-bottom-left-radius: 0;\r\n    }\r\n`\r\n\r\nexport const NavItem = styled.div``\r\n\r\nexport const StyledNavnarNavLink = styled(NavLink)`\r\n    text-decoration: none;\r\n    color: #fffaf7;\r\n\r\n    :hover {\r\n        padding-left: 5px;\r\n        border-left: 1px solid ${Colors.lightGreen};\r\n        transition: 0.1s ease-in;\r\n        color: ${Colors.lightGreen};\r\n    }\r\n    :active {\r\n        color: ${Colors.lightGreen};\r\n    }\r\n    .active {\r\n        padding-left: 10px;\r\n        border-left: 3px solid ${Colors.lightGreen};\r\n        color: ${Colors.lightGreen};\r\n    }\r\n`\r\n","import React from 'react'\r\nimport {\r\n    NavItem,\r\n    StyledNavBar,\r\n    StyledNavnarNavLink,\r\n} from '../../styles/Navbar-styles'\r\n\r\nconst Navbar: React.FC = (props) => {\r\n    return (\r\n        <StyledNavBar>\r\n            <NavItem>\r\n                <StyledNavnarNavLink to=\"/profile\" activeClassName=\"active\">\r\n                    Profile\r\n                </StyledNavnarNavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <StyledNavnarNavLink to=\"/dialogues\" activeClassName=\"active\">\r\n                    Messages\r\n                </StyledNavnarNavLink>\r\n            </NavItem>\r\n            {/* TODO: remove comments due to added News & Music */}\r\n            {/* <NavItem>\r\n                <StyledNavnarNavLink to=\"/News\" activeClassName={active}>\r\n                    News\r\n                </StyledNavnarNavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <StyledNavnarNavLink to=\"/Music\" activeClassName={active}>\r\n                    Music\r\n                </StyledNavnarNavLink>\r\n            </NavItem> */}\r\n            <NavItem>\r\n                <StyledNavnarNavLink to=\"/settings\" activeClassName=\"active\">\r\n                    Settings\r\n                </StyledNavnarNavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <StyledNavnarNavLink to=\"/users\" activeClassName=\"active\">\r\n                    Users\r\n                </StyledNavnarNavLink>\r\n            </NavItem>\r\n        </StyledNavBar>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport Text from 'antd/lib/typography/Text'\r\n\r\nconst News: React.FC<any> = () => {\r\n    return <Text code>In Progress</Text>\r\n}\r\n\r\nexport default News\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport News from './News'\r\n\r\nclass NewsContainer extends React.Component<any> {\r\n    render() {\r\n        return <News />\r\n    }\r\n}\r\n// todo: fix\r\nlet mapStateToProps = (userId: any) => ({\r\n    key: userId,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, { withAuthRedirect })\r\n)(NewsContainer)\r\n","import React from 'react'\r\nimport Text from 'antd/lib/typography/Text'\r\n\r\nconst Settings: React.FC<any> = (props) => {\r\n    return <Text code>In Progress</Text>\r\n}\r\n\r\nexport default Settings\r\n","import { ResponseType, GetItemsType, instance } from './api'\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`).then(res => { return res.data })\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<ResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<ResponseType>\r\n    }\r\n}","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {           //return array if it\r\n        if (u[objPropName] === itemId) {    //see identity of name of 'u' and iteId\r\n            return { ...u, ...newObjProps } //replace old properties with new newObjProps\r\n        }\r\n        return u;\r\n    })\r\n}","import { Dispatch } from 'react'\r\nimport { usersAPI } from '../api/users-api'\r\nimport { updateObjectInArray } from \"../utils/object-helpers\"\r\nimport { UserType } from './../types/types'\r\nimport { BasicThunkType, InferActionsTypes } from './redux-store'\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number> //array of users ids   \r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', { followed: true })\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', { followed: false })\r\n            }\r\n        case 'SN/USERS/SET_USERS': {\r\n            return { ...state, users: action.users }\r\n        }\r\n        case 'SN/USERS/SET_CURRENT_PAGE': {\r\n            return { ...state, currentPage: action.currentPage }\r\n        }\r\n        case 'SN/USERS/SET_USERS_TOTAL_COUNT': {\r\n            return { ...state, totalUsersCount: action.totalUsersCount }\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return { ...state, isFetching: action.isFetching }\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const usersActions = {\r\n    followSuccess: (userId: number) => ({ type: 'SN/USERS/FOLLOW', userId } as const),\r\n    unfollowSuccess: (userId: number) => ({ type: 'SN/USERS/UNFOLLOW', userId } as const),\r\n    setUsers: (users: Array<UserType>) => ({ type: 'SN/USERS/SET_USERS', users } as const),\r\n    setCurrentPage: (currentPage: number) => ({ type: 'SN/USERS/SET_CURRENT_PAGE', currentPage } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({ type: 'SN/USERS/SET_USERS_TOTAL_COUNT', totalUsersCount } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({ type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({ type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId } as const)\r\n}\r\n\r\nexport const requestUsers = (page: number, pageSize: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(usersActions.setCurrentPage(page))\r\n        dispatch(usersActions.toggleIsFetching(true))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n\r\n        dispatch(usersActions.setUsers(data.items))\r\n        dispatch(usersActions.setTotalUsersCount(data.totalCount))\r\n        dispatch(usersActions.toggleIsFetching(false))\r\n    }\r\n}\r\n\r\nconst _followUnfollowToggle = async (dispatch: any, userId: number, apiMethod: any, actionCreator: (userId: number) => ActionsTypes) => {\r\n\r\n    dispatch(usersActions.toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(usersActions.toggleFollowingProgress(false, userId))\r\n}\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch: Dispatch<ActionsTypes>) => {\r\n        _followUnfollowToggle(dispatch, userId, usersAPI.follow.bind(usersAPI), usersActions.followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch: Dispatch<ActionsTypes>) => {\r\n        _followUnfollowToggle(dispatch, userId, usersAPI.unfollow.bind(usersAPI), usersActions.unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof usersActions>\r\ntype ThunkType = BasicThunkType<ActionsTypes>\r\n\r\nexport default usersReducer","import styled from 'styled-components'\r\n\r\nexport const UserPhoto = styled.img`\r\n    border-radius: 10px;\r\n    /* box-shadow: 5px 5px 10px #cecece, -5px -5px 10px #ffffff; */\r\n    height: 100px;\r\n    transition: 0.3s;\r\n    :active {\r\n        opacity: 0.8;\r\n    }\r\n    :active,\r\n    :focus,\r\n    :hover,\r\n    :visited {\r\n        opacity: 0.3;\r\n    }\r\n`\r\n\r\nexport const UserContainer = styled.main`\r\n    padding: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    text-align: center;\r\n\r\n    Button {\r\n        background: rgba(0, 0, 0, 0.1);\r\n        border: none;\r\n    }\r\n`\r\n\r\nexport const Span = styled.span`\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    padding: 5px;\r\n`\r\n\r\nexport const StyledUsersContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\n\r\nexport const UsersPage = styled.div`\r\n    margin: 0 auto;\r\n    width: 90%;\r\n`\r\n\r\nexport const UserName = styled.div`\r\n    margin: 10px 0px 3px 0px;\r\n    cursor: pointer;\r\n`\r\n\r\nexport const UserInfo = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    ::nth-child(2) {\r\n        margin-bottom: 3px;\r\n    }\r\n`\r\n","import { CaretLeftOutlined, CaretRightOutlined } from '@ant-design/icons'\r\nimport cn from 'classnames'\r\nimport React, { useState } from 'react'\r\nimport {\r\n    Page,\r\n    StyledButton,\r\n    StyledPaginator,\r\n    StyledPaginatorPage,\r\n} from '../../../styles/App-styles'\r\nimport styles from './Paginator.module.css'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({\r\n    totalItemsCount,\r\n    pageSize,\r\n    currentPage,\r\n    onPageChanged,\r\n    portionSize = 10,\r\n}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n    let pages: Array<number> = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <StyledPaginatorPage>\r\n            {portionNumber > 1 && (\r\n                <StyledButton\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber - 1)\r\n                    }}\r\n                >\r\n                    <CaretLeftOutlined />\r\n                </StyledButton>\r\n            )}\r\n            <StyledPaginator>\r\n                {pages\r\n                    .filter(\r\n                        (p) =>\r\n                            p >= leftPortionPageNumber &&\r\n                            p <= rightPortionPageNumber\r\n                    )\r\n                    .map((p) => {\r\n                        return (\r\n                            <div\r\n                                // FIX: className\r\n\r\n                                // currentPage={currentPage === p ? currentPage : ''}\r\n                                className={cn(\r\n                                    {\r\n                                        [styles.selectedPage]:\r\n                                            currentPage === p,\r\n                                    },\r\n                                    styles.pageNumber\r\n                                )}\r\n                                key={p}\r\n                                onClick={(e) => {\r\n                                    onPageChanged(p)\r\n                                }}\r\n                            >\r\n                                <Page>{p}</Page>\r\n                            </div>\r\n                        )\r\n                    })}\r\n            </StyledPaginator>\r\n            {portionCount > portionNumber && (\r\n                <StyledButton\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber + 1)\r\n                    }}\r\n                >\r\n                    <CaretRightOutlined />\r\n                </StyledButton>\r\n            )}\r\n        </StyledPaginatorPage>\r\n    )\r\n}\r\n\r\nexport default Paginator\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport userPhoto from '../../assets/images/USER.png'\r\nimport {\r\n    UserContainer,\r\n    UserPhoto,\r\n    UserName,\r\n    UserInfo,\r\n} from '../../styles/Users-styles'\r\nimport { UserType } from '../../types/types'\r\nimport { Button } from 'antd'\r\nimport Text from 'antd/lib/typography/Text'\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({\r\n    user,\r\n    followingInProgress,\r\n    unfollow,\r\n    follow,\r\n}) => {\r\n    return (\r\n        <UserContainer>\r\n            <div>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                    <UserPhoto\r\n                        src={\r\n                            user.photos.small != null\r\n                                ? user.photos.small\r\n                                : userPhoto\r\n                        }\r\n                        alt=\"\"\r\n                    />\r\n                </NavLink>\r\n            </div>\r\n            <div>\r\n                <UserInfo>\r\n                    <UserName>{user.name}</UserName>\r\n                    {user.status ? <Text code>{user.status}</Text> : ''}\r\n                </UserInfo>\r\n                {user.followed ? (\r\n                    <Button\r\n                        disabled={followingInProgress.some(\r\n                            (id) => id === user.id\r\n                        )}\r\n                        onClick={() => {\r\n                            unfollow(user.id)\r\n                        }}\r\n                    >\r\n                        Unfollow\r\n                    </Button>\r\n                ) : (\r\n                    <Button\r\n                        disabled={followingInProgress.some(\r\n                            (id) => id === user.id\r\n                        )}\r\n                        onClick={() => {\r\n                            follow(user.id)\r\n                        }}\r\n                    >\r\n                        Follow\r\n                    </Button>\r\n                )}\r\n            </div>\r\n        </UserContainer>\r\n    )\r\n}\r\n\r\nexport default User\r\n","import React from 'react'\r\nimport { StyledUsersContainer, UsersPage } from '../../styles/Users-styles'\r\nimport { UserType } from '../../types/types'\r\nimport Paginator from '../common/Paginator/Paginator'\r\nimport User from './User'\r\n\r\ntype UsersType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet Users: React.FC<UsersType> = ({\r\n    currentPage,\r\n    totalUsersCount,\r\n    pageSize,\r\n    onPageChanged,\r\n    users,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <UsersPage>\r\n            <Paginator\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}\r\n                totalItemsCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n            />\r\n            <StyledUsersContainer>\r\n                {users.map((u) => (\r\n                    <User\r\n                        user={u}\r\n                        followingInProgress={props.followingInProgress}\r\n                        key={u.id}\r\n                        unfollow={props.unfollow}\r\n                        follow={props.follow}\r\n                    />\r\n                ))}\r\n            </StyledUsersContainer>\r\n        </UsersPage>\r\n    )\r\n}\r\n\r\nexport default Users\r\n","import { AppStateType } from './redux-store'\r\nimport { createSelector } from \"reselect\"\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { follow, unfollow, requestUsers } from '../../redux/users-reducer'\r\nimport Users from './Users'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport { compose } from 'redux'\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n} from '../../redux/users-selectors'\r\nimport { UserType } from '../../types/types'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsers: (currentPage: number, pageNumber: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype OwnProps = {}\r\n\r\ntype PropsType = MapDispatchPropsType & MapStatePropsType & OwnProps\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        const { currentPage, pageSize } = this.props\r\n        this.props.getUsers(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const { pageSize } = this.props\r\n        this.props.getUsers(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? (\r\n                    <Preloader />\r\n                ) : (\r\n                    <Users\r\n                        totalUsersCount={this.props.totalUsersCount}\r\n                        pageSize={this.props.pageSize}\r\n                        currentPage={this.props.currentPage}\r\n                        onPageChanged={this.onPageChanged}\r\n                        users={this.props.users}\r\n                        follow={this.props.follow}\r\n                        unfollow={this.props.unfollow}\r\n                        followingInProgress={this.props.followingInProgress}\r\n                    />\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnProps, AppStateType>(\r\n        mapStateToProps,\r\n        { follow, unfollow, getUsers: requestUsers }\r\n    )\r\n)(UsersContainer)\r\n","import React, { Suspense } from 'react'\r\nimport Preloader from '../components/common/Preloader/Preloader'\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return (\r\n            <Suspense fallback={<Preloader />}>\r\n                <WrappedComponent {...props} />\r\n            </Suspense>\r\n        )\r\n    }\r\n}\r\n","import { InferActionsTypes } from './redux-store';\r\nimport { getAuthUserData } from \"./auth-reducer\"\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/SET-INITIALIZED':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializingSuccess: () => ({\r\n        type: 'SN/APP/SET-INITIALIZED'\r\n    } as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise]).then(() => { //if all promises that are in [] brackets are returned *then* we will change initializing to true\r\n        dispatch(actions.initializingSuccess())\r\n    })\r\n\r\n}\r\n\r\nexport default appReducer","let initialState = {\r\n\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\nconst friendsBarReducer = (state = initialState, action: any) => {\r\n\r\n    return state\r\n}\r\n\r\nexport default friendsBarReducer","import { combineReducers, createStore, Action } from \"redux\"\r\n\r\nimport dialogueReducer from \"./dialogue-reducer\"\r\nimport profileReducer from \"./profile-reducer\"\r\nimport friendsBarReducer from \"./friends-bar-reducer\"\r\nimport usersReducer from \"./users-reducer\"\r\nimport authReducer from \"./auth-reducer\"\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\"\r\nimport { applyMiddleware } from \"redux\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\"\r\nimport { compose } from \"redux\"\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialoguesPage: dialogueReducer,\r\n    friendsBar: friendsBarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n})\r\n\r\ntype rootReducerType = typeof rootReducers\r\nexport type AppStateType = ReturnType<rootReducerType>\r\nexport type BasicThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n\r\n// type PropertiesType<T> = T extends { [key: string]: infer U } ? U : never // T extends obj that has property key, then find out what is type of U\r\n\r\n// export type InferActionsTypes<T extends { [key: string]: (...arg: any) => any }> = ReturnType<PropertiesType<T>>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nlet store = createStore(rootReducers, compose(\r\n    applyMiddleware(thunkMiddleware),\r\n    //@ts-ignore\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n))\r\n\r\n//@ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store","import { message } from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport React from 'react'\r\nimport { connect, Provider } from 'react-redux'\r\nimport {\r\n    HashRouter,\r\n    Redirect,\r\n    Route,\r\n    Switch,\r\n    withRouter,\r\n} from 'react-router-dom'\r\nimport { compose } from 'redux'\r\nimport Preloader from './components/common/Preloader/Preloader'\r\nimport HeaderContainer from './components/Header/HeaderContainer'\r\nimport Login from './components/Login/Login'\r\nimport MusicContainer from './components/Music/MusicContainer'\r\nimport Navbar from './components/Navbar/Navbar'\r\nimport NewsContainer from './components/News/NewsContainer'\r\nimport Settings from './components/Settings/Settings'\r\nimport UsersContainer from './components/Users/UsersContainer'\r\nimport { withSuspense } from './hoc/withSuspense'\r\nimport { initializeApp } from './redux/app-reducer'\r\nimport store, { AppStateType } from './redux/redux-store'\r\nimport { Main, MainWrapper } from './styles/App-styles'\r\n\r\nconst DialoguesContainer = React.lazy(() =>\r\n    import('./components/Dialogues/DialoguesContainer')\r\n)\r\nconst ProfileContainer = React.lazy(() =>\r\n    import('./components/Profile/ProfileContainer')\r\n)\r\n\r\nconst SuspendedDialogues = withSuspense(DialoguesContainer)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\n\r\ntype MapPropsType = ReturnType<typeof MapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        message.error(`Error: ${e.reason}`)\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Social-Network'\r\n        this.props.initializeApp()\r\n        window.addEventListener(\r\n            'unhandledrejection',\r\n            this.catchAllUnhandledErrors\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\r\n            'unhandledrejection',\r\n            this.catchAllUnhandledErrors\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader />\r\n        } else {\r\n            return (\r\n                <MainWrapper>\r\n                    <HeaderContainer />\r\n                    <Navbar />\r\n                    <Main>\r\n                        <Switch>\r\n                            <Route\r\n                                path=\"/profile/:userId?\"\r\n                                render={() => <SuspendedProfile />}\r\n                            />\r\n                            <Route\r\n                                path=\"/dialogues\"\r\n                                render={() => <SuspendedDialogues />}\r\n                            />\r\n                            <Route\r\n                                path=\"/news\"\r\n                                render={() => <NewsContainer />}\r\n                            />\r\n                            <Route\r\n                                path=\"/music\"\r\n                                render={() => <MusicContainer />}\r\n                            />\r\n                            <Route\r\n                                path=\"/settings\"\r\n                                render={() => <Settings />}\r\n                            />\r\n                            <Route\r\n                                path=\"/users\"\r\n                                render={() => <UsersContainer />}\r\n                            />\r\n                            <Route path=\"/login\" render={() => <Login />} />\r\n                            <Route\r\n                                exact\r\n                                path=\"/\"\r\n                                render={() => <Redirect to=\"/profile\" />}\r\n                            />\r\n                            <Route\r\n                                path=\"*\"\r\n                                render={() => (\r\n                                    <div className=\"notFoundPage\">\r\n                                        <h1>404</h1>\r\n                                        <h3>Page not found</h3>\r\n                                    </div>\r\n                                )}\r\n                            />\r\n                        </Switch>\r\n                    </Main>\r\n                </MainWrapper>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized,\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(MapStateToProps, { initializeApp })\r\n)(App)\r\n\r\nconst SocialApp: React.FC = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <AppContainer />\r\n            </Provider>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default SocialApp\r\n","import * as serviceWorker from './serviceWorker'\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport SocialApp from \"./App\"\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n\r\n    <SocialApp />\r\n    , document.getElementById('root'))\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()","import React from 'react'\r\nimport preloader from '../../../assets/images/giphy.gif'\r\nimport { StyledPreloader } from '../../../styles/App-styles'\r\n\r\ntype PropsType = {}\r\n\r\nlet Preloader: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <StyledPreloader>\r\n            <img src={preloader} alt=\"\" />\r\n        </StyledPreloader>\r\n    )\r\n}\r\n\r\nexport default Preloader\r\n","import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../redux/redux-store'\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) =>\r\n    ({\r\n        isAuth: state.auth.isAuth,\r\n    } as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(\r\n    WrappedComponent: React.ComponentType<WCP>\r\n) {\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (\r\n        props\r\n    ) => {\r\n        let { isAuth, ...restProps } = props\r\n\r\n        if (!isAuth) return <Redirect to=\"/login\" />\r\n\r\n        return <WrappedComponent {...(restProps as WCP)} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<\r\n        MapPropsType,\r\n        DispatchPropsType,\r\n        WCP,\r\n        AppStateType\r\n    >(\r\n        mapStateToPropsForRedirect,\r\n        {}\r\n    )(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n"],"sourceRoot":""}