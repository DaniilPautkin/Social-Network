{"version":3,"sources":["styles/Profile-styles.tsx","components/Profile/Profileinfo/ProfileDataForm.tsx","components/Profile/Profileinfo/ProfileStatus.tsx","components/Profile/Profileinfo/Profileinfo.tsx","styles/Posts-styles.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["styled","div","Description","ProfileImage","img","SingleForm","ChooseFileForm","Input","Colors","greenColor","Contacts","StyledContact","ContactTitle","Field","StatusLine","StyledAddPostForm","Form","Likes","Text","StyledSpan","span","Status","ProfileInfoItem","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","onClick","createField","RFInput","type","RFTextarea","Object","keys","contacts","map","key","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","code","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileData","isOwner","activateEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","Profileinfo","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","alt","name","target","files","length","initialValues","formData","then","PostsContainer","PostElemets","PostImg","StyledPost","required","Post","userphoto","message","likesCount","MyPostsMemoized","React","memo","postsElements","posts","reverse","p","id","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","actions","MyPosts","Profile","ProfileContainer","Component","refreshProfile","UserId","this","match","params","loggedUserId","history","push","getUserProfile","getStatus","console","componentDidMount","componentDidUpdate","prevProps","prevState","render","compose","auth","userId","isAuth","withRouter"],"mappings":"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","file":"static/js/4.dc058f68.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nimport { Input } from 'antd'\r\nimport { Colors } from './App-styles'\r\nimport Form from 'antd/lib/form/Form'\r\nimport Text from 'antd/lib/typography/Text'\r\nimport { Field } from 'redux-form'\r\n\r\nexport const MissingStatusBar = styled.div`\r\n    margin: 5px;\r\n    padding: 5px;\r\n    border-radius: 5px;\r\n    color: #ffffff;\r\n    background-color: #66fcf1;\r\n    font-weight: 300;\r\n\r\n    :hover {\r\n        background-color: rgb(0, 0, 0, 0);\r\n    }\r\n`\r\n\r\nexport const Description = styled.div`\r\n    padding: 10px;\r\n`\r\n\r\nexport const ProfileImage = styled.img`\r\n    height: 100px;\r\n    margin: 5px 5px 0px 5px;\r\n    border-radius: 10px;\r\n`\r\n\r\nexport const SingleForm = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n`\r\n\r\nexport const ChooseFileForm = styled(Input)`\r\n    cursor: pointer;\r\n    width: 300px;\r\n    border-radius: 10px;\r\n    margin: 10px;\r\n    color: rgba(0, 0, 0, 0.7);\r\n\r\n    ::-webkit-file-upload-button {\r\n        visibility: hidden;\r\n    }\r\n    :focus {\r\n        background: ${Colors.greenColor};\r\n        color: #fff;\r\n    }\r\n    ::before {\r\n        content: 'Select...';\r\n    }\r\n    ::after {\r\n        content: '';\r\n    }\r\n    :hover {\r\n        /* color: ${Colors.greenColor}; */\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nexport const Contacts = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    /* display: grid; */\r\n    /* grid-template-areas: 'contact input'; */\r\n`\r\n\r\nexport const StyledContact = styled.div`\r\n    /* grid-area: contact; */\r\n    padding: 2px 5px 2px;\r\n    border-radius: 2px;\r\n    margin-left: 10px;\r\n    display: flex;\r\n    align-items: flex-start;\r\n    Input {\r\n        width: 400px;\r\n    }\r\n`\r\n\r\nexport const ContactInputField = styled(Field)`\r\n    grid-area: input;\r\n`\r\nexport const ProfileContainer = styled.div`\r\n    border-radius: 5px;\r\n    grid-area: cont;\r\n`\r\n\r\nexport const ContactTitle = styled.div`\r\n    font-weight: 600;\r\n`\r\n\r\nexport const StatusLine = styled.div`\r\n    color: rgba(0, 0, 0, 0.6);\r\n    font-size: 17px;\r\n    font-weight: 600px;\r\n`\r\n\r\nexport const StyledAddPostForm = styled(Form)`\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 80%;\r\n`\r\n\r\nexport const Likes = styled(Text)`\r\n    color: rgba(0, 0, 0, 0.5);\r\n`\r\n\r\nexport const StyledSpan = styled.span`\r\n    cursor: pointer;\r\n    margin-left: 10px;\r\n`\r\n\r\nexport const Status = styled.div`\r\n    text-align: center;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n`\r\n\r\nexport const ProfileInfoItem = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    b {\r\n        margin-right: 5px;\r\n        color: rgba(0, 0, 0, 0.5);\r\n    }\r\n`\r\n","import { Button } from 'antd'\r\nimport React from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { FormSummaryError } from '../../../styles/FormsControls-styles'\r\nimport {\r\n    Contacts,\r\n    SingleForm,\r\n    StyledContact,\r\n} from '../../../styles/Profile-styles'\r\nimport { ProfileType } from '../../../types/types'\r\nimport {\r\n    createField,\r\n    GetStringKeys,\r\n    RFInput,\r\n    RFTextarea,\r\n} from '../../common/FormsControls/FormsControls'\r\n\r\nconst ProfileDataForm: React.FC<\r\n    InjectedFormProps<ProfileType, PropsType> & PropsType\r\n> = ({ handleSubmit, profile, error }) => {\r\n    return (\r\n        // FIX:\r\n        <form onSubmit={handleSubmit}>\r\n            <Button onClick={handleSubmit}>Save</Button>\r\n            {error && <FormSummaryError>{error}</FormSummaryError>}\r\n            <SingleForm>\r\n                <b>Fullname:</b>{' '}\r\n                <div>\r\n                    {createField<ProfileTypeKeys>(\r\n                        'Full name',\r\n                        'fullName',\r\n                        [],\r\n                        RFInput\r\n                    )}\r\n                </div>\r\n            </SingleForm>\r\n\r\n            <SingleForm>\r\n                <b>Looking for a job:</b>{' '}\r\n                <div>\r\n                    {createField<ProfileTypeKeys>(\r\n                        '',\r\n                        'lookingForAJob',\r\n                        [],\r\n                        RFInput,\r\n                        {\r\n                            type: 'checkbox',\r\n                        }\r\n                    )}\r\n                </div>\r\n            </SingleForm>\r\n\r\n            <SingleForm>\r\n                <b>Skills and background:</b>{' '}\r\n                <div>\r\n                    {createField<ProfileTypeKeys>(\r\n                        'Skills and background',\r\n                        'lookingForAJobDescription',\r\n                        [],\r\n                        RFTextarea\r\n                    )}\r\n                </div>\r\n            </SingleForm>\r\n\r\n            <SingleForm>\r\n                <b>About me:</b>{' '}\r\n                <div>\r\n                    {createField<ProfileTypeKeys>(\r\n                        'About me',\r\n                        'aboutMe',\r\n                        [],\r\n                        RFTextarea\r\n                    )}\r\n                </div>\r\n            </SingleForm>\r\n\r\n            <Contacts>\r\n                <b>Contacts:</b>{' '}\r\n                {Object.keys(profile.contacts).map((key) => {\r\n                    // TODO: create some solution for embedded objects\r\n                    return (\r\n                        <StyledContact key={key}>\r\n                            <b>{key}: </b>\r\n                            {createField(key, 'contacts.' + key, [], RFInput)}\r\n                        </StyledContact>\r\n                    )\r\n                })}\r\n            </Contacts>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({\r\n    form: 'edit-profile',\r\n})(ProfileDataForm)\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nexport default ProfileDataFormReduxForm\r\n","import { Input } from 'antd'\r\nimport Text from 'antd/lib/typography/Text'\r\nimport React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport { Status, StatusLine, StyledSpan } from '../../../styles/Profile-styles'\r\n\r\ntype PropsType = {\r\n    updateStatus: (newStatus: string) => void\r\n    status: string\r\n}\r\n\r\nconst ProfileStatus = (props: PropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <div>\r\n            {!editMode && (\r\n                <Status>\r\n                    <StatusLine>Status: </StatusLine>\r\n                    <StyledSpan onDoubleClick={activateEditMode}>\r\n                        {props.status || <Text code>No status</Text>}\r\n                    </StyledSpan>\r\n                </Status>\r\n            )}\r\n            {editMode && (\r\n                <Status>\r\n                    <StatusLine>Status: </StatusLine>\r\n                    <Input\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateEditMode}\r\n                        value={status}\r\n                    />\r\n                </Status>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus\r\n","import { Button } from 'antd'\r\nimport React, { ChangeEvent, useState } from 'react'\r\nimport userPhoto from '../../../assets/images/USER.png'\r\nimport {\r\n    ChooseFileForm,\r\n    Contacts,\r\n    ContactTitle,\r\n    Description,\r\n    ProfileImage,\r\n    ProfileInfoItem,\r\n    StyledContact,\r\n} from '../../../styles/Profile-styles'\r\nimport { ContactsType, ProfileType } from '../../../types/types'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileDataFormReduxForm from './ProfileDataForm'\r\nimport ProfileStatus from './ProfileStatus'\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (props: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profileinfo: React.FC<PropsType> = ({\r\n    isOwner,\r\n    profile,\r\n    status,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelect = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // TODO: remove then\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Description>\r\n            <div>\r\n                <ProfileImage src={profile.photos.large || userPhoto} alt=\"\" />\r\n                {isOwner && (\r\n                    <div>\r\n                        {/* <label htmlFor=\"inputFile\">Upload photo</label> */}\r\n                        <ChooseFileForm\r\n                            name=\"inputFile\"\r\n                            type={'file'}\r\n                            onChange={onMainPhotoSelect}\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n                {editMode ? (\r\n                    <ProfileDataFormReduxForm\r\n                        initialValues={profile}\r\n                        onSubmit={onSubmit}\r\n                        profile={profile}\r\n                    />\r\n                ) : (\r\n                    <ProfileData\r\n                        activateEditMode={() => {\r\n                            setEditMode(true)\r\n                        }}\r\n                        profile={profile}\r\n                        isOwner={isOwner}\r\n                    />\r\n                )}\r\n\r\n                <ProfileStatus status={status} updateStatus={updateStatus} />\r\n            </div>\r\n        </Description>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({\r\n    profile,\r\n    isOwner,\r\n    activateEditMode,\r\n}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <Button onClick={activateEditMode}>Edit</Button>}\r\n\r\n            <ProfileInfoItem>\r\n                <b>Fullname:</b> <div>{profile.fullName}</div>\r\n            </ProfileInfoItem>\r\n\r\n            <ProfileInfoItem>\r\n                <b>Looking for a job:</b>{' '}\r\n                <div>{profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n            </ProfileInfoItem>\r\n            <ProfileInfoItem>\r\n                <b>Skills and background:</b>{' '}\r\n                {profile.lookingForAJob && (\r\n                    <div>{profile.lookingForAJobDescription}</div>\r\n                )}\r\n            </ProfileInfoItem>\r\n\r\n            <ProfileInfoItem>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </ProfileInfoItem>\r\n\r\n            <Contacts>\r\n                <b>Contacts:</b>{' '}\r\n                {Object.keys(profile.contacts).map((key) => {\r\n                    return (\r\n                        <Contact\r\n                            key={key}\r\n                            contactTitle={key}\r\n                            contactValue={\r\n                                profile.contacts[key as keyof ContactsType]\r\n                            }\r\n                        />\r\n                    )\r\n                })}\r\n            </Contacts>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({\r\n    contactTitle,\r\n    contactValue,\r\n}) => {\r\n    return (\r\n        <StyledContact>\r\n            <ContactTitle>{contactTitle}: </ContactTitle> {contactValue}\r\n        </StyledContact>\r\n    )\r\n}\r\n\r\nexport default Profileinfo\r\n","import styled from 'styled-components'\r\nimport { Input } from 'antd'\r\n\r\nexport const PostsContainer = styled.div`\r\n    padding: 10px;\r\n`\r\n\r\nexport const PostElemets = styled.div``\r\n\r\nexport const PostInput = styled(Input)`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: flex-start;\r\n`\r\n\r\nexport const PostImg = styled.img`\r\n    margin: 1px 5px 1px 0px;\r\n    height: 20px;\r\n`\r\n\r\nexport const StyledPost = styled.div`\r\n    color: black;\r\n`\r\n","import { Button } from 'antd'\r\nimport React from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { StyledAddPostForm } from '../../../../styles/Profile-styles'\r\nimport { required } from '../../../../utils/validators/validators'\r\nimport {\r\n    createField,\r\n    GetStringKeys,\r\n    RFInput,\r\n} from '../../../common/FormsControls/FormsControls'\r\n\r\ntype PropsType = {}\r\n\r\nexport type AddPostValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostValuesType>\r\n\r\nconst AddPostForm: React.FC<\r\n    InjectedFormProps<AddPostValuesType, PropsType> & PropsType\r\n> = (props) => {\r\n    return (\r\n        <StyledAddPostForm>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>(\r\n                    'Post',\r\n                    'newPostText',\r\n                    [required],\r\n                    RFInput\r\n                )}\r\n            </div>\r\n            <div>\r\n                <Button onClick={props.handleSubmit}>post</Button>\r\n            </div>\r\n        </StyledAddPostForm>\r\n    )\r\n}\r\nexport default reduxForm<AddPostValuesType, PropsType>({\r\n    form: 'profile-add-post',\r\n})(AddPostForm)\r\n","import React from 'react'\r\nimport userphoto from '../../../../assets/images/USER.png'\r\nimport { StyledPost, PostImg } from '../../../../styles/Posts-styles'\r\nimport { Likes } from '../../../../styles/Profile-styles'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <StyledPost>\r\n            <h2>\r\n                {' '}\r\n                <PostImg alt=\"\" src={userphoto} />\r\n                {props.message}\r\n            </h2>\r\n            <Likes>Likes {props.likesCount}</Likes>\r\n        </StyledPost>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport { PostElemets, PostsContainer } from '../../../styles/Posts-styles'\r\nimport { PostType } from '../../../types/types'\r\nimport AddNewPostFormRedux, {\r\n    AddPostValuesType,\r\n} from './AddPostForm/AddPostForm'\r\nimport Post from './Post/Post'\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let postsElements = [...props.posts]\r\n        .reverse()\r\n        .map((p) => (\r\n            <Post key={p.id} message={p.message} likesCount={p.likesCount} />\r\n        ))\r\n\r\n    let onAddPost = (values: AddPostValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <PostsContainer>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            <PostElemets>{postsElements}</PostElemets>\r\n        </PostsContainer>\r\n    )\r\n}\r\n\r\nconst MyPostsMemoized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemoized\r\n","// import Post from \"./Post/Post\";\r\nimport { actions } from '../../../redux/profile-reducer'\r\nimport MyPosts, { MapPropsType, DispatchPropsType } from './MyPosts'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../../../redux/redux-store'\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    } as MapPropsType\r\n}\r\n\r\nconst MyPostsContainer = connect<\r\n    MapPropsType,\r\n    DispatchPropsType,\r\n    {},\r\n    AppStateType\r\n>(mapStateToProps, { addPost: actions.addPost })(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n","import React from 'react'\r\nimport Profileinfo from './Profileinfo/Profileinfo'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport { ProfileType } from '../../types/types'\r\n\r\ntype PropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (props: ProfileType) => Promise<any>\r\n    profile: ProfileType | null\r\n    status: string\r\n    isOwner: boolean\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <Profileinfo\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react'\r\nimport Profile from './Profile'\r\nimport {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n} from '../../redux/profile-reducer'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { ProfileType } from '../../types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (props: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    UserId: string\r\n}\r\n\r\ntype PropsType = MapPropsType &\r\n    DispatchPropsType &\r\n    RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let UserId: number | null = +this.props.match.params.UserId\r\n        if (!UserId) {\r\n            UserId = this.props.loggedUserId\r\n            // TODO: change history.push to Redirect\r\n            if (!UserId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        if (!UserId) {\r\n            console.error('userId is missing in URI or state')\r\n        } else {\r\n            this.props.getUserProfile(UserId)\r\n            this.props.getStatus(UserId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.UserId !== prevProps.match.params.UserId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.UserId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    loggedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatus,\r\n        updateStatus,\r\n        savePhoto,\r\n        saveProfile,\r\n    }),\r\n    withRouter\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}